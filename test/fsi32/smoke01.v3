//@execute = 0
def main() -> int {
	for (i < runs.length) {
		var r = runs[i].check();
		if (r < 0) return i * 10000 + r;
	}
	return 0;
}

def INTS: Array<int> = [0, 1, 2, -3, 32, 63, 64, 65, 127, 128, -127, -128, 253, -254, 255, 1000, 2300, 65536, 2000000000, int.min, int.max];
def LONGS: Array<long> = [0, 1, 2, -3, 32, 63, 64, 65, 127, 128, -127, -128, 253, -254, 255, 1000, 2300, 65536, int.max, -2000000000l, long.min, long.max];
def BYTES: Array<byte> = [0, 1, 2, 32, 33, 63, 64, 64, 127, 128, 129, 253, 254, 255];
def NON_ZERO_BYTES: Array<byte> = [1, 2, 32, 33, 63, 64, 65, 127, 128, 129, 253, 254, 255];
def runs: Array<Run> = [
	Run2.new(byte.+, BYTES),
	Run2.new(byte.-, BYTES),
	Run2.new(byte.*, BYTES),
	Run2.new(byte./, NON_ZERO_BYTES),
	Run2.new(byte.%, NON_ZERO_BYTES),
	Run2.new(byte.&, BYTES),
	Run2.new(byte.|, BYTES),
	Run2.new(byte.^, BYTES),

	Run2.new(byte.==, BYTES),
	Run2.new(byte.!=, BYTES),
	Run2.new(byte.<, BYTES),
	Run2.new(byte.<=, BYTES),
	Run2.new(byte.>, BYTES),
	Run2.new(byte.>=, BYTES),
	
	Run1.new(plus0, BYTES),
	Run1.new(plus1, BYTES),
	Run1.new(plus255, BYTES),
	Run1.new(div5, BYTES),
	Run1.new(mul4, BYTES),
	Run1.new(lt5, BYTES),
	Run1.new(shl3, BYTES),
	Run1.new(byte.view<int>, INTS),
	Run1.new(byte.view<long>, LONGS),
	Run1.new(int.view<byte>, BYTES),
	Run1.new(long.view<byte>, BYTES),
	Run1.new(int.!<byte>, BYTES),
	Run1.new(long.!<byte>, BYTES),
	Run1.new(Obj4<byte>.new(22, 33, (44, 55)).fold1(_, byte.-), BYTES),
	Run1.new(nfold, BYTES),
	Run1.new(barray(_, [33, 44, 55, 66, 77, 88]), BYTES),
	Run1.new(barrayn, BYTES),

	Run.new()
];

def plus0(b: byte) -> byte { return b + byte.view(0); }
def plus1(b: byte) -> byte { return b + byte.view(1); }
def plus255(b: byte) -> byte { return b + byte.view(255); }
def div5(b: byte) -> byte { return b / byte.view(5); }
def mul4(b: byte) -> byte { return b * byte.view(4); }
def lt5(b: byte) -> bool { return b < byte.view(5); }
def shl3(b: byte) -> byte { return b << 3; }
def nfold(b: byte) -> byte { return Obj4<byte>.new(33, 65, (127, 255)).fold1(b, byte.^); }
def barray(b: byte, a: Array<byte>) -> byte {
	var i = b % a.length;
	var v1 = a[i];
	a[i] = b;
	var v2 = a[i];
	a[i] = v1;
	return byte.view(v1 + v2);
}
def barrayn(b: byte) -> byte {
	return barray(b, [88, byte.view(b + 99), 255]);
}

class Run {
	def check() -> int { return 0; }
}
class Run1<T, R>(func: T -> R, inputs: Array<T>) extends Run {
	def results = Array<R>.new(inputs.length);
	new() {
		for (i < inputs.length) results[i] = func(inputs[i]);
	}
	def check() -> int {
		for (i < inputs.length) {
			var expected = results[i];
			var got = func(inputs[i]);
			if (expected != got) return -1 - i;
		}
		return 0;
	}
}
class Run2<T, R>(func: (T, T) -> R, inputs: Array<T>) extends Run {
	def results = Array<Array<R>>.new(inputs.length);
	new() {
		for (i < results.length) results[i] = Array<R>.new(inputs.length);
		for (i < results.length) {
			for (j < results.length) {
				results[i][j] = func(inputs[i], inputs[j]);
			}
		}
	}
	def check() -> int {
		for (i < results.length) {
			for (j < results.length) {
				var expected = results[i][j];
				var got = func(inputs[i], inputs[j]);
				if (expected != got) return -1 - i * 100 - j;
			}
		}
		return 0;
	}
}
class Obj4<T>(var a: T, var b: T, var c: (T, T)) {
	def fold2(xa: T, xb: T, f: (T, T) -> T) -> T {
		a = xa;
		b = xb;
		return fold0(f);
	}
	def fold1(xa: T, f: (T, T) -> T) -> T {
		a = xa;
		return fold0(f);
	}
	def fold0(f: (T, T) -> T) -> T {
		return f(a, f(b, f(c.0, c.1)));
	}
}
