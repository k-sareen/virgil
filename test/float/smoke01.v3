//@execute 0=42
def F = [1f, -2f, 3.75f, float.nan, float.infinity, -0f];
def D = [1d, -2d, 3.75d, double.nan, double.infinity, -0d];

def runs: Array<Run> = [
	Run2.new(float.==, F, bool.==),
	Run2.new(float.!=, F, bool.==),
	Run2.new(float.<, F, bool.==),
	Run2.new(float.<=, F, bool.==),
	Run2.new(float.>, F, bool.==),
	Run2.new(float.>=, F, bool.==),

	Run1.new(float.sign, F, u1.==),
	Run1.new(float.exponent, F, i8.==),
	Run1.new(float.fraction, F, u23.==),

	Run1.new(float.abs, F, feq),
	Run1.new(float.ceil, F, feq),
	Run1.new(float.floor, F, feq),
	Run1.new(float.sqrt, F, feq),

	Run2.new(float.+, F, feq),
	Run2.new(float.-, F, feq),
	Run2.new(float.*, F, feq),
	Run2.new(float./, F, feq),

	Run1.new(int.?<float>, F, bool.==),
	Run1.new(i24.truncf, F, i24.==),
	Run1.new(i32.truncf, F, i32.==),
	Run1.new(u32.truncf, F, u32.==),
	Run1.new(i64.truncf, F, i64.==),
	Run1.new(u64.truncf, F, u64.==),
	Run1.new(double.?<float>, F, bool.==),
	Run1.new(double.!<float>, F, deq),
	Run1.new(fconv, D, feq),

	Run2.new(double.==, D, bool.==),
	Run2.new(double.!=, D, bool.==),
	Run2.new(double.<, D, bool.==),
	Run2.new(double.<=, D, bool.==),
	Run2.new(double.>, D, bool.==),
	Run2.new(double.>=, D, bool.==),

	Run1.new(double.sign, D, u1.==),
	Run1.new(double.exponent, D, i11.==),
	Run1.new(double.fraction, D, u52.==),

	Run1.new(double.abs, D, deq),
	Run1.new(double.ceil, D, deq),
	Run1.new(double.floor, D, deq),
	Run1.new(double.sqrt, D, deq),

	Run2.new(double.+, D, deq),
	Run2.new(double.-, D, deq),
	Run2.new(double.*, D, deq),
	Run2.new(double./, D, deq),

	Run1.new(int.?<double>, D, bool.==),
	Run1.new(i24.truncd, D, i24.==),
	Run1.new(i32.truncd, D, i32.==),
	Run1.new(u32.truncd, D, u32.==),
	Run1.new(i64.truncd, D, i64.==),
	Run1.new(u64.truncd, D, u64.==),
	Run1.new(float.?<double>, D, bool.==),

	Run.new()
];

def main(a: int) -> int {
	for (i < runs.length) {
		var x = runs[i].check();
		if (x < 0) return -100 * i + x;
	}
	return 42;
}

def feq(x: float, y: float) -> bool {
	return u32.view(x) == u32.view(y);
}
def deq(x: double, y: double) -> bool {
	return u64.view(x) == u64.view(y);
}
def fconv(d: double) -> float {
	return if(float.?(d), float.!(d));
}

class Run {
	def check() -> int { return 0; }
}
class Run1<T, R>(func: T -> R, inputs: Array<T>, eq: (R, R) -> bool) extends Run {
	def results = Array<R>.new(inputs.length);
	new() {
		for (i < inputs.length) results[i] = func(inputs[i]);
	}
	def check() -> int {
		for (i < inputs.length) {
			var expected = results[i];
			var got = func(inputs[i]);
			if (!eq(expected, got)) return -1 - i;
		}
		return 0;
	}
}
class Run2<T, R>(func: (T, T) -> R, inputs: Array<T>, eq: (R, R) -> bool) extends Run {
	def results = Array<R>.new(inputs.length - 1);
	new() {
		for (i < results.length) results[i] = func(inputs[i], inputs[i+1]);
	}
	def check() -> int {
		for (i < results.length) {
			var expected = results[i];
			var got = func(inputs[i], inputs[i+1]);
			if (!eq(expected, got)) return -1 - i;
		}
		return 0;
	}
}
