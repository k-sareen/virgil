#!/bin/bash

GREEN='[0;32m'
YELLOW='[0;33m'
RED='[0;31m'
NORM='[0;00m'

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

CONFIG=$DIR/config
BIN=$DIR/bin

mkdir -p $CONFIG

if [ "$1" = "clean" ]; then
    rm -f $CONFIG/*
    exit 0
fi

function configure_progress() {
    printf "Configuring progress..."
    if [ -f $CONFIG/progress ]; then
	echo ${YELLOW}exists${NORM}
	return
    fi

    # sense host platform for piping of progress output
    PLATFORM=$(uname -sm)

    if [[ "$PLATFORM" = "Linux i386" ]]; then
	T="x86-linux"
	echo "${GREEN}${T}${NORM}"
	ln -s $BIN/progress-$T $CONFIG/progress
    elif [[ "$PLATFORM" = "Linux i686" || "$PLATFORM" = "Linux x86_64" ]]; then
	T="x86-64-linux"
	echo "${GREEN}${T}${NORM}"
	ln -s $BIN/progress-$T $CONFIG/progress
    elif [[ "$PLATFORM" = "Darwin i386" ]]; then
	T="x86-darwin"
	echo "${GREEN}${T}${NORM}"
	ln -s $BIN/progress-$T $CONFIG/progress
    elif [[ "$PLATFORM" = "Darwin x86_64" ]]; then
	T="x86-64-darwin"
	echo "${GREEN}${T}${NORM}"
	ln -s $BIN/progress-$T $CONFIG/progress
    else
	echo ${RED}not supported${NORM}
    fi
}

function configure_x86_linux() {
    T="x86-linux"
    printf "Configuring $T-test..."
    if [ -f $CONFIG/execute-$T-test ]; then
	echo ${YELLOW}exists${NORM}
	return
    fi

    PLATFORM=$(uname -sm)

    # sense host platform for native execution of binaries
    if [[ "$PLATFORM" = "Linux i386" || "$PLATFORM" = "Linux i686" || "$PLATFORM" = "Linux x86_64" ]]; then
	echo "${GREEN}native${NORM}"
	ln -s $BIN/execute-$T-test $CONFIG/execute-$T-test
	ln -s $BIN/run-native-sh $CONFIG/run-$T
    else
	echo ${RED}not supported${NORM}
    fi
}

function configure_x86_darwin() {
    T="x86-darwin"
    printf "Configuring $T-test..."
    if [ -f $CONFIG/execute-$T-test ]; then
	echo ${YELLOW}exists${NORM}
	return
    fi

    PLATFORM=$(uname -sm)

    # sense host platform for native execution of binaries
    if [[ "$PLATFORM" = "Darwin i386" || "$PLATFORM" = "Darwin x86_64" ]]; then
	echo "${GREEN}native${NORM}"
	ln -s $BIN/execute-$T-test $CONFIG/execute-$T-test
	ln -s $BIN/run-native-sh $CONFIG/run-$T
	ln -s $BIN/progress-$T $CONFIG/progress
    else
	echo ${RED}not supported${NORM}
    fi
}

function configure_jvm() {
    T="jvm"
    printf "Configuring $T-test..."
    if [ -f $CONFIG/execute-$T-test ]; then
	echo ${YELLOW}exists${NORM}
	return
    fi

    JAVA=$(which java)

    if [ ! -z "$JAVA" ]; then
	# java is supported, search for suitable binaries
	ln -s $JAVA $CONFIG/java
	echo "${GREEN}found${NORM} $JAVA"
	ln -s $BIN/execute-jvm-test $CONFIG/execute-jvm-test
	ln -s $BIN/run-jar $CONFIG/run-jar
    else
	echo ${RED}not supported${NORM}
    fi
}

function configure_wasm_js() {
    T="wasm-js"
    printf "Configuring $T-test..."
    if [ -f $CONFIG/execute-$T-test ]; then
	echo ${YELLOW}exists${NORM}
	return
    fi

    D8=$(which d8)

    if [ ! -z "$D8" ]; then
	echo "${GREEN}found${NORM} $D8"
	echo '#!/bin/bash' > $CONFIG/d8
	echo "$D8 \$@" >> $CONFIG/d8
	chmod 755 $CONFIG/d8
	ln -s $BIN/execute-$T-test $CONFIG/execute-$T-test
    else
	echo ${RED}not supported${NORM}
    fi
}

function configure_wasm_wave() {
    T="wasm-wave"
    printf "Configuring $T..."
    if [ -f $CONFIG/run-$T ]; then
	echo ${YELLOW}exists${NORM}
	return
    fi

    WAVE=$(which wave)

    if [ ! -z "WAVE" ]; then
	echo "${GREEN}found${NORM} $WAVE"
	ln -s $WAVE $CONFIG/wave
	ln -s $BIN/run-$T $CONFIG/run-$T
    else
	echo ${RED}not supported${NORM}
    fi
}

configure_progress
configure_x86_linux
configure_x86_darwin
configure_jvm
configure_wasm_js
configure_wasm_wave
