// Copyright 2019 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

component RiRuntime {
	var gcInit: void -> void;
	var gcCollect: (int, Pointer, Pointer) -> Pointer;
	// Called from the exported, generated "entry" stub and used to
	// construct the arguments to pass to main.
	def init(argc: int) -> Array<string> {
		if (gcInit != null) gcInit();
		var args = Array<string>.new(argc);
		for (i < argc) {
			var len = wave.arg_len(i);
			var str = Array<byte>.new(len);
			wave.arg_copy(i, Pointer.atContents(str), len);
			args[i] = str;
		}
		return args;
	}
	// Called from the generated allocation stub upon allocation failure.
	def gc(size: int, ip: Pointer, sp: Pointer) -> Pointer {
		var shadowStackStart = CiRuntime.SHADOW_STACK_CUR_PTR.load<Pointer>();
		var shadowStackEnd = CiRuntime.SHADOW_STACK_END_PTR.load<Pointer>();
		if (gcCollect != null) return gcCollect(size, shadowStackStart, shadowStackEnd);
		System.error("HeapOverflow", "no garbage collector installed");
		return Pointer.NULL; // unreachable
	}
	def fatalException(ex: string, msg: string, ip: Pointer, sp: Pointer) {
		System.err.putc('!').puts(ex);
		if (msg != null) System.err.puts(": ").puts(msg).ln();
		else System.err.ln();
		System.error(ex, msg);
	}
}
