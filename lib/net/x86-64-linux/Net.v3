// Copyright 2022 Virgil Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Implementation of the "Net" component for Linux, using underlying Linux
// syscalls and methods.

// Represents an internet address. It can be one of Ipv4 for IPv4 addresses or
// Ipv6 for IPv6 addresses.
type InetAddress {
	case Ipv4(oct0: u8, oct1: u8, oct2: u8, oct3: u8);
	case Ipv6(word0: u32, word1: u32, word2: u32, word3: u32);

	def toArray() -> Array<byte> {
		match (this) {
			Ipv4(o0, o1, o2, o3) => return [o0, o1, o2, o3];
			Ipv6(w0, w1, w2, w3) => {
				return [byte.view((w0 >> 24) & 0xFF), byte.view((w0 >> 16) & 0xFF), byte.view((w0 >> 8) & 0xFF), byte.view(w0 & 0xFF),
					byte.view((w1 >> 24) & 0xFF), byte.view((w1 >> 16) & 0xFF), byte.view((w1 >> 8) & 0xFF), byte.view(w1 & 0xFF),
					byte.view((w2 >> 24) & 0xFF), byte.view((w2 >> 16) & 0xFF), byte.view((w2 >> 8) & 0xFF), byte.view(w2 & 0xFF),
					byte.view((w3 >> 24) & 0xFF), byte.view((w3 >> 16) & 0xFF), byte.view((w3 >> 8) & 0xFF), byte.view(w3 & 0xFF)];
			}
		}
	}

	def length() -> int {
		match (this) {
			Ipv4 => return 4;
			Ipv6 => return 16;
		}
	}

	def render(buf: StringBuilder) -> StringBuilder {
		match (this) {
			Ipv4(o0, o1, o2, o3) => {
				buf.put3("%d.%d.%d.", o0, o1, o2);
				buf.put1("%d", o3);
			}
			Ipv6 => {
				def len = 16;
				def addr = this.toArray();
				var zeroStart = -1, zeroEnd = -1;
				// Find the start and end of the longest chain of zeroes
				for (i = 0; i < len; i += 2) {
					var j = i;
					while (j < len) {
						if (addr[j] == 0 && addr[j + 1] == 0) {
							j += 2;
						} else {
							break;
						}
					}

					if (j > i && (j - i) > zeroEnd - zeroStart) {
						zeroStart = i;
						zeroEnd = j;
						i = j;
					}
				}

				// If only atmost 2 bytes are 0, then we just display them
				if (zeroEnd - zeroStart <= 2) {
					zeroStart = -1;
					zeroEnd = -1;
				}

				for (i = 0; i < len; i += 2) {
					if (i == zeroStart) {
						buf.puts("::");
						i = zeroEnd;
						if (i >= len) {
							break;
						}
					} else if (i > 0) {
						buf.puts(":");
					}
					buf.put1("%x", (int.view(addr[i]) << 8) | addr[i + 1]);
				}
			}
		}
		return buf;
	}
}

// Pointer to an int used for interfacing with the kernel
class IntPointer(x: int) { }

// Convert a Socket {socket} to its C-struct representation. The return value
// for IPv4 should match the struct sockaddr_in type, while the return value
// for IPv6 should match the struct sockaddr_in6 type. Note that the port and
// IP address need to written in network-byte order, i.e. in big-endian.
//
// Returns the C-struct representation of {socket}.
def socketToSockAddr(socket: Socket, server: bool) -> Array<byte> {
	match (socket.addr) {
		Ipv4(o0, o1, o2, o3) => {
			// Definition of sockaddr for IPv4:
			// struct sockaddr_in {
			//   short int          sin_family;  // Address family, AF_INET
			//   unsigned short int sin_port;    // Port number
			//   struct in_addr     sin_addr;    // Internet address
			//   unsigned char      sin_zero[8]; // Same size as struct sockaddr
			// };
			def sockAddrBldr = DataWriter.new();
			def port = if(server, socket.localPort, socket.port);
			sockAddrBldr.acquire(LinuxConst.SOCKADDR_V4_SIZE);
			// sin_family
			sockAddrBldr.put_b16(LinuxConst.AF_INET);
			// sin_port
			sockAddrBldr.put_b16be(int.view(port));
			// sin_addr
			sockAddrBldr.putb(o0);
			sockAddrBldr.putb(o1);
			sockAddrBldr.putb(o2);
			sockAddrBldr.putb(o3);
			// sin_zero
			sockAddrBldr.zeroN(8);
			return sockAddrBldr.extract();
		}
		Ipv6(w0, w1, w2, w3) => {
			// Definition of sockaddr for IPv6:
			// struct sockaddr_in6 {
			//     u_int16_t       sin6_family;   // address family, AF_INET6
			//     u_int16_t       sin6_port;     // port number, Network Byte Order
			//     u_int32_t       sin6_flowinfo; // IPv6 flow information (set to 0)
			//     struct in6_addr sin6_addr;     // IPv6 address
			//     u_int32_t       sin6_scope_id; // Scope ID (set to 0)
			// };
			//
			// struct in6_addr {
			//     unsigned char   s6_addr[16];   // IPv6 address
			// };
			def sockAddrBldr = DataWriter.new();
			def port = if(server, socket.localPort, socket.port);
			sockAddrBldr.acquire(LinuxConst.SOCKADDR_V6_SIZE);
			// sin6_family
			sockAddrBldr.put_b16(LinuxConst.AF_INET6);
			// sin6_port
			sockAddrBldr.put_b16be(int.view(port));
			// sin6_flowinfo
			sockAddrBldr.zeroN(4);
			// sin6_addr
			sockAddrBldr.put_b32be(int.view(w0));
			sockAddrBldr.put_b32be(int.view(w1));
			sockAddrBldr.put_b32be(int.view(w2));
			sockAddrBldr.put_b32be(int.view(w3));
			// sin6_scope_id
			sockAddrBldr.zeroN(4);
			return sockAddrBldr.extract();
		}
	}
}

// An abstraction over a network socket that allows for sending and receiving
// messages.
class Socket {
	// IP address of socket
	def addr: InetAddress;
	// Associated file descriptor of socket
	def var fd: int;
	// Local port the socket is connected to
	def var localPort: int;
	// Server port the socket is connected to
	def var port: int;

	new(addr, localPort, port, sockfd: int, createSocket: bool) {
		if (createSocket) {
			def family = if(InetAddress.Ipv4.?(addr), LinuxConst.AF_INET, LinuxConst.AF_INET6);
			fd = Net.socket(family, LinuxConst.SOCK_STREAM /* type */, 0 /* protocol */);
		} else {
			fd = sockfd;
		}
	}

	def setLocalPort(local: int) {
		localPort = local;
	}

	// Read a message into buffer {buf} from the socket. Return how many bytes
	// were read into the buffer.
	def read(buf: Array<byte>) -> int {
		return System.fileReadK(fd, buf, 0, buf.length);
	}

	// Write a message {msg} into the socket.
	def write(msg: string) {
		System.fileWriteK(fd, msg, 0, msg.length);
	}

	// Close the socket.
	def close() {
		System.fileClose(fd);
	}
}

// A socket that connects to remote host.
class ClientSocket extends Socket {
	// Associated sockaddr structure. Is instantiated in connect()
	private var sockAddr: Array<byte>;

	new(addr: InetAddress, port: int) super(addr, -1 /* localPort */, port, -1 /* fd */, true) { }

	// Connect socket to remote host with IP address {addr} on {port}. Returns -1
	// if an error has occurred and 0 if everything is correctly functioning.
	def connect() -> int {
		sockAddr = socketToSockAddr(this, false);
		// Connect socket
		def ret = Net.connect(fd, sockAddr);
		def size = if(InetAddress.Ipv4.?(addr), LinuxConst.SOCKADDR_V4_SIZE, LinuxConst.SOCKADDR_V6_SIZE);
		var retSockAddr = Array<byte>.new(size);
		def sockNameRet = Net.getsockname(fd, retSockAddr);
		if (ret == -1 || sockNameRet == -1) {
			return -1;
		}
		// XXX: Why can't we set `def var` fields from a subclass?
		setLocalPort((int.view(retSockAddr[2]) << 8) | int.view(retSockAddr[3]));
		return ret;
	}
}

// A socket that accepts connections from incoming peers.
class ServerSocket extends Socket {
	// Associated sockaddr structure. Is instantiated in bind()
	private var sockAddr: Array<byte>;

	new(addr: InetAddress, localPort: int) super(addr, localPort, -1 /* port */, -1 /* fd */, true) { }

	// Bind socket to IP address {addr} on {localPort}. Returns -1 if an error
	// has occurred and 0 if everything is correctly functioning.
	def bind() -> int {
		sockAddr = socketToSockAddr(this, true);
		// Bind socket to localPort
		return Net.bind(fd, sockAddr);
	}

	// Start listening on {addr}:{localPort} for incoming connections. Returns -1
	// if an error has occurred and 0 if everything is correctly functioning.
	def listen() -> int {
		return Net.listen(fd, 10 /* backlog */);
	}

	// Accept an incoming connection {addr}:{localPort} for incoming connections.
	// Returns null if an error has occurred and a {Socket} for the new incoming
	// connection if everything is correctly functioning.
	def accept() -> Socket {
		var retSockAddr = Array<byte>.new(LinuxConst.SOCKADDR_STORAGE_SIZE);
		var retSock = Net.accept(fd, retSockAddr);
		def retSockAddrSize = retSock.1.x;

		retSockAddr = Arrays.range(retSockAddr, 0, retSockAddrSize);
		def retPort = (int.view(retSockAddr[2]) << 8) | int.view(retSockAddr[3]);

		match (retSockAddrSize) {
			LinuxConst.SOCKADDR_V4_SIZE => {
				def retAddr = Net.rangeToInetAddress(retSockAddr[4 ... 8]);
				return Socket.new(retAddr, localPort, retPort, retSock.0, false);
			}
			LinuxConst.SOCKADDR_V6_SIZE => {
				def retAddr = Net.rangeToInetAddress(retSockAddr[8 ... 24]);
				return Socket.new(retAddr, localPort, retPort, retSock.0, false);
			}
			LinuxConst.SOCKADDR_UNIX_SIZE => {
				System.error("Unimplemented", "UNIX connections are currently unsupported!");
			}
			_ => {
				System.error("Error", "Unexpected size for returned sockaddr!");
			}
		}

		return null;
	}
}

component Net {
	def ANY_V4 = InetAddress.Ipv4(0, 0, 0, 0);
	def LOCALHOST_V4 = InetAddress.Ipv4(127, 0, 0, 1);

	def ANY_V6 = InetAddress.Ipv6(0, 0, 0, 0);
	def LOCALHOST_V6 = InetAddress.Ipv6(0, 0, 0, 1);

	// Convert a range of bytes {r} to an equivalent InetAddress. {r} has to be
	// either 4-bytes long (for IPv4 addresses) or 16-bytes long (for IPv6
	// addresses). This function will fail if {r}'s length is not one of 4 or 16.
	def rangeToInetAddress(r: Range<byte>) -> InetAddress {
		if (r.length == 4) {
			return InetAddress.Ipv4(r[0], r[1], r[2], r[3]);
		} else if (r.length == 16) {
			return InetAddress.Ipv6(
				(u32.view(r[0]) << 24)  | (u32.view(r[1]) << 16)  | (u32.view(r[2]) << 8)  | r[3],
				(u32.view(r[4]) << 24)  | (u32.view(r[5]) << 16)  | (u32.view(r[6]) << 8)  | r[7],
				(u32.view(r[8]) << 24)  | (u32.view(r[9]) << 16)  | (u32.view(r[10]) << 8) | r[11],
				(u32.view(r[12]) << 24) | (u32.view(r[13]) << 16) | (u32.view(r[14]) << 8) | r[15]
			);
		} else {
			System.error("Error", "Unexpected length for IP address!");
			return Net.ANY_V4;
		}
	}

	// Create a new socket with {family}, {socketType}, {protocol}. Returns
	// the new fd for the created socket and -1 if an error occurred.
	//
	// See: man 2 socket
	def socket(family: int, socketType: int, protocol: int) -> int {
		// (return value, errno)
		def ret = Linux.syscall(LinuxConst.SYS_socket, (family, socketType, protocol));
		return if(ret.0 >= 0, int.view(ret.0), -1);
	}

	// Connect to socket with {sockfd} and {sockAddr} struct. Returns 0 if
	// the connection succeeds and -1 if an error occurred.
	//
	// See: man 2 connect
	def connect(sockfd: int, sockAddr: Array<byte>) -> int {
		def ret = Linux.syscall(LinuxConst.SYS_connect, (sockfd, Pointer.atContents(sockAddr), sockAddr.length));
		return if(ret.0 >= 0, int.view(ret.0), -1);
	}

	// Accept a new connection on socket {sockfd}. Write metadata for the
	// new connection in the {sockAddr} struct. Returns a tuple of the new
	// fd for the new socket and the length of the written metadata.
	// Returns -1 if an error occurred.
	//
	// See: man 2 accept
	def accept(sockfd: int, sockAddr: Array<byte>) -> (int, IntPointer) {
		var ptr = IntPointer.new(sockAddr.length);
		def ret = Linux.syscall(LinuxConst.SYS_accept, (sockfd, Pointer.atContents(sockAddr), Pointer.atField(ptr.x)));
		return (if(ret.0 >= 0, int.view(ret.0), -1), ptr);
	}

	// Bind a socket {sockfd} to the IP address and port specified in the
	// {sockAddr} struct. Returns 0 if the binding succeeds and -1 if an
	// error occurred.
	//
	// See: man 2 bind
	def bind(sockfd: int, sockAddr: Array<byte>) -> int {
		def ret = Linux.syscall(LinuxConst.SYS_bind, (sockfd, Pointer.atContents(sockAddr), sockAddr.length));
		return if(ret.0 >= 0, int.view(ret.0), -1);
	}

	// Start listening for incoming connection on socket {sockfd}.
	// {backlog} specifies the length of the message queue. Returns 0 if
	// the binding succeeds and -1 if an error occurred.
	//
	// See: man 2 listen
	def listen(sockfd: int, backlog: int) -> int {
		def ret = Linux.syscall(LinuxConst.SYS_listen, (sockfd, backlog));
		return if(ret.0 >= 0, int.view(ret.0), -1);
	}

	// Write the address and port to the {sockAddr} struct the socket
	// {sockfd} is currently bound to. This is used to query the
	// {localPort} for ClientSockets. Returns 0 if the query succeeds and
	// -1 if an error occurred.
	//
	// See: man 2 getsockname
	def getsockname(sockfd: int, sockAddr: Array<byte>) -> int {
		var ptr = IntPointer.new(sockAddr.length);
		def ret = Linux.syscall(LinuxConst.SYS_getsockname, (sockfd, Pointer.atContents(sockAddr), Pointer.atField(ptr.x)));
		return if(ret.0 >= 0, int.view(ret.0), -1);
	}
}
