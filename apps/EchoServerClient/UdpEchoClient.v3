// Copyright 2022 Virgil Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// This implements a simple UDP echo client that connects to 127.0.0.1:5555 or
// ::1:5555 and sends the message provided by the user from the commandline.

def EXIT_FAILURE = -1;
def options = BasicOptions.new(null);
def help    = options.newBoolOption("h", false);
def v6      = options.newBoolOption("v6", false);
def connect = options.newBoolOption("connect", false);

def usage() {
	System.puts("Usage: UdpEchoClient [-h] [-v6] [-connect] \"<message string>\"\n");
	System.puts("  -h        Print this option summary\n");
	System.puts("  -v6       Use IPv6 instead of IPv4\n");
	System.puts("  -connect  Use connected sockets instead of connectionless ones\n");
	RiOs.exit(EXIT_FAILURE);
}

def main(args: Array<string>) {
	args = options.parse(args);
	if (help.get() || args.length == 0) {
		usage();
	}

	var sock: Socket;
	var packet: UdpPacket = null;
	def localhost = if(v6.get(), Net.LOCALHOST_V6, Net.LOCALHOST_V4);

	if (connect.get()) {
		sock = ClientSocket.new(localhost, 5555, SocketType.Udp);
	} else {
		sock = UdpSocket.new(0, v6.get());
		packet = UdpPacket.new(localhost, 5555);
	}

	def msgBuf = Array<byte>.new(512);
	def buf = StringBuilder.new();

	match (sock.open()) {
		x: NetResult<void>.Error => {
			buf.put1("Unable to open socket: %s", x.e.desc);
			System.error("Error", buf.toString());
		}
		_ => ;
	}

	buf.put1("Hello! Socket opened on fd %d\n", sock.fd);
	System.puts(buf.toString());

	if (connect.get()) {
		var cSock = ClientSocket.!(sock);
		match (cSock.connect()) {
			x: NetResult<void>.Error => {
				buf.put1("Socket connection failed: %s", x.e.desc);
				System.error("Error", buf.toString());
			}
			_ => ;
		}

		buf.put3(
			"Created socket connection from %q:%d to %q",
			localhost.render,
			sock.localPort,
			sock.addr.render
		);
		buf.put1(":%d\n", sock.port);
		System.puts(buf.toString());
	}

	def msg = args[0];
	buf.put3(
		"send msg to %q:%d: \"%s\"\n",
		localhost.render,
		if(connect.get(), sock.port, packet.port),
		Strings.strip(msg)
	);
	System.puts(buf.toString());

	var numRead = 0;
	if (connect.get()) {
		match (sock.send(args[0])) {
			x: NetResult<void>.Error => {
				buf.put1("Send message failed: %s", x.e.desc);
				System.error("Error", buf.toString());
			}
			_ => ;
		}

		match (sock.recv(msgBuf)) {
			x: NetResult<int>.Error => {
				buf.put1("Receive message failed: %s", x.e.desc);
				System.error("Error", buf.toString());
			}
			x: NetResult<int>.Result => numRead = x.v;
		}
	} else {
		match (sock.sendto(args[0], packet)) {
			x: NetResult<void>.Error => {
				buf.put1("Send message failed: %s", x.e.desc);
				System.error("Error", buf.toString());
			}
			_ => ;
		}

		match (sock.recvfrom(msgBuf, packet)) {
			x: NetResult<(int, UdpPacket)>.Error => {
				buf.put1("Receive message failed: %s", x.e.desc);
				System.error("Error", buf.toString());
			}
			x: NetResult<(int, UdpPacket)>.Result => {
				numRead = x.v.0;
				packet = x.v.1;
			}
		}
	}

	def recvMsg = Arrays.range(msgBuf, 0, numRead);
	if (!Strings.equal(msg, recvMsg)) {
		buf.put1("Received different msg than sent: \"%s\"\n", recvMsg);
	} else {
		buf.puts("Received same msg!\n");
	}
	System.puts(buf.toString());
	sock.close();
}
