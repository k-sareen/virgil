def TEST = UnitTest.new("Type", test);

def error = System.error("TestError", _);

def assertString(expected: string, got: string) {
	if (!Arrays.equal(expected, got)) error(Strings.format2("expected \"%s\", got \"%s\"", expected, got));
}

def assertBuffer(expected: string, buf: StringBuilder) {
	var ok = buf.length == expected.length;
	if (ok) {
		for (i < expected.length) {
			if (buf.buf[i] != expected[i]) {
				ok = false;
				break;
			}
		}
	}
	if (!ok) error(Strings.format2("expected \"%s\", got \"%s\"", expected, buf.toString()));
}

def buf = StringBuilder.new();
def assertRender(expected: string, render: StringBuilder -> StringBuilder) {
	assertBuffer(expected, render(buf.reset()));
}

def test() {
	// TODO: more internal tests for Type
	{
		assertRender("int", Int.TYPE.render);
		var f = Function.newType(Int.TYPE, Int.TYPE);
		assertRender("int -> int", f.render);
		assertRender("(int -> int) -> int", Function.newType(f, Int.TYPE).render);
		assertRender("int -> int -> int", Function.newType(Int.TYPE, f).render);
	}

	{
		var ir = NamedTypeRef.new(null, Token.new("f", "int", 0, 0), null);
		assertRender("int", ir.render);
		var f = FuncTypeRef.new(ir, ir);
		assertRender("int -> int", f.render);
		assertRender("(int -> int) -> int", FuncTypeRef.new(f, ir).render);
		assertRender("int -> int -> int", FuncTypeRef.new(ir, f).render);
	}
}