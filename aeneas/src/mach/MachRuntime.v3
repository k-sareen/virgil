// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Represents all runtime data structures exposed to the Virgil runtime code.
class MachRuntime(mach: MachProgram) {
	def codeRegion = mach.codeRegion;
	def addrs = Array<int>.new(CiRuntimeModule.max); // CiRuntime absolute addresses
	var typeCon: CiRuntime_TypeCon;

	// Indexes in the IrModule's roots vector
	var ri_init = -1;
	var ri_gc = -1;
	var ri_signal = -1;

	var src: MachRtSrcTables;
	var gc: MachRtGcTables;

	var heapSize = Aeneas.HEAP_SIZE.get();
	var shadowStackSize = Aeneas.SHADOW_STACK_SIZE.get();

	new() {
		if (Aeneas.RT_STTABLES.get()) src = MachRtSrcTables.new(mach, this);
		if (Aeneas.RT_GCTABLES.get()) gc = MachRtGcTables.new(mach, this);
		var ptrType: Type;
		match (mach.data.addressSize) {
			2 => ptrType = MachModule.PTR_16.ptrType;
			4 => ptrType = MachModule.PTR_32.ptrType;
			8 => ptrType = MachModule.PTR_64.ptrType;
			_ => ptrType = V3.fail("invalid address size");
		}
		typeCon = CiRuntime_TypeCon.new(ptrType, mach.prog.typeCache);
	}

	def recordStackStart(addr: int) {
		recordAddr(CiRuntimeModule.STACK_START, addr);
	}
	def recordStackEnd(addr: int) {
		recordAddr(CiRuntimeModule.STACK_END, addr);
	}
	def recordCodeStart(addr: int) {
		recordAddr(CiRuntimeModule.CODE_START, addr);
	}
	def recordCodeEnd(addr: int) {
		recordAddr(CiRuntimeModule.CODE_END, addr);
	}
	def recordDataStart(addr: int) {
		recordAddr(CiRuntimeModule.DATA_START, addr);
	}
	def recordDataEnd(addr: int) {
		recordAddr(CiRuntimeModule.DATA_END, addr);
	}
	def recordAddr(c: CiRuntime_Address, addr: int) {
		if (Aeneas.PRINT_BIN.get()) Terminal.put2("CiRuntime.%s=%x\n", c.name, addr);
		c.setAbs(this, addr);
	}
	def getExceptionDest(off: int, ex: string, source: Source) -> Addr {
		if (src != null) return src.newExceptionDest(ex, source);
		return getFatalAddress(ex);
	}
	def addHeapPointers(w: MachDataWriter) {
		var C: CiRuntimeModule;
		addRegionPointers(w,
			C.HEAP_START, C.HEAP_END,
			C.HEAP_CUR_LOC, null, C.HEAP_END_LOC,
			heapSize);
	}
	def addShadowStackPointers(w: MachDataWriter) {
		var C: CiRuntimeModule;
		addRegionPointers(w,
			C.SHADOW_STACK_START, C.SHADOW_STACK_END,
			C.SHADOW_STACK_START_PTR, C.SHADOW_STACK_CUR_PTR, C.SHADOW_STACK_END_PTR,
			shadowStackSize);
	}
	private def addRegionPointers(w: MachDataWriter, regionStart: CiRuntime_Address, regionEnd: CiRuntime_Address,
				 startLoc: CiRuntime_Address, curLoc: CiRuntime_Address, endLoc: CiRuntime_Address, size: u32) {
		var C: CiRuntimeModule, P = mach.data.addressSize;
		w.atEnd().alignAddr(P);
		var addr = w.endAddr();
		var count = 0;
		if (startLoc != null) count++;
		if (curLoc != null) count++;
		if (endLoc != null) count++;
		var startAddr = addr + count * P, endAddr = startAddr + int.view(size);
		regionStart.setAbs(this, startAddr);
		regionEnd.setAbs(this, endAddr);
		if (Aeneas.PRINT_BIN.get()) {
			Terminal.put2("CiRuntime.%s = %x\n", regionStart.name, startAddr);
			Terminal.put2("CiRuntime.%s = %x\n", regionEnd.name, endAddr);
		}
		emitLoc(w, startLoc, startAddr);
		emitLoc(w, curLoc, startAddr);
		emitLoc(w, endLoc, endAddr);
		if (w.endAddr() != startAddr) V3.fail<void>("");
	}
	private def emitLoc(w: MachDataWriter, loc: CiRuntime_Address, val: int) {
		if (loc == null) return;
		var locAddr = w.endAddr();
		loc.setAbs(this, locAddr);
		if (Aeneas.PRINT_BIN.get()) Terminal.put3("CiRuntime.%s@%x -> %d\n", loc.name, locAddr, val);
		match (mach.data.addressSize) {
			1 => w.putb(val);
			2 => w.put_b16(val);
			4 => w.put_b32(val);
			8 => w.put_b64(val);
			_ => { return V3.fail("invalid data address size"); }
		}
	}
	def codePages() -> int {
		var end = CiRuntimeModule.CODE_END.getAbs(this);
		if (end == 0) mach.prog.ERROR.fail("code end not set yet");
		var size = end - CiRuntimeModule.CODE_START.getAbs(this);
		var align = codeRegion.space.pageAlign;
		return align.alignUp(size) >> align.shift;
	}
	def encode(w: MachDataWriter) {
		if (gc != null) gc.encode(w);
		if (src != null) src.encode(w);
	}
	def getFatalAddress(ex: string) -> Addr {
		var addr = mach.stubMap[ex].0;
		if (addr == null) {
			addr = Address.new(codeRegion, Arrays.concat("fatal_", ex));
			mach.stubMap[ex] = (addr, null);
		}
		return addr;
	}
	def parseTestInputs(prog: Program, error: ErrorGen, expected: int) -> Array<Array<Val>> {
		var e = SpecParser.parseFile(error, prog.files[0], prog.inputs[0]);
		heapSize = e.heapSize;
		var runs = Lists.toArray(e.runs);
		var result = Array<Array<Val>>.new(runs.length);
		for (i < runs.length) {
			result[i] = Lists.toArray(runs[i].input);
		}
		return result;
	}
	def addRoots() {
		var typeCon = mach.prog.typeEnv.lookup("RiRuntime");
		if (V3Component_TypeCon.?(typeCon)) {
			// some RiRuntime methods are called by compiled code
			var ctype = V3Component_TypeCon.!(typeCon).componentDecl.getDeclaredType();
			var ic = mach.prog.ir.getIrClass(ctype);
			for (meth in ic.methods) {
				if (meth == null) continue;
				var name = meth.source.name();
				if (Aeneas.RT_GC.get() && Strings.equal(name, "gc")) ri_gc = addRoot(ctype, meth);
				else if (Strings.equal(name, "init")) ri_init = addRoot(ctype, meth);
				else if (Strings.equal(name, "signal")) ri_signal = addRoot(ctype, meth);
			}
		}
	}
	def getRiGc() -> IrMethod {
		return getRoot(ri_gc);
	}
	def getRiInit() -> IrMethod {
		return getRoot(ri_init);
	}
	def getRiSignal() -> IrMethod {
		return getRoot(ri_signal);
	}
	private def getRoot(index: int) -> IrMethod {
		return if(index >= 0, mach.prog.ir.roots[index].spec.asMethod());
	}
	private def addRoot(ctype: Type, meth: IrMethod) -> int {
		return mach.prog.ir.addRoot(null, IrSpec.new(ctype, [ctype], meth));
	}
}
