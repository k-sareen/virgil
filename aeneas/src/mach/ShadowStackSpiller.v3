// Copyright 2019 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Responsible for transforming Arch code containing livepoints (i.e. kills
// of VRegs across potential GC points) to use a shadow stack. To do this,
// it computes good locations for the allocation and deallocation of the stack frame,
// saves and restores of VRegs, and inserts code into the instruction stream
// to accomplish this. Code after this transformation is no longer in SSA form,
// since multiple new definitions of a VReg may be introduced. The code is, however,
// safe to run through the MachStackifier, since all live ranges will be split so
// that no VReg originally live across a livepoint is live across any livepoint after
// transformation.
class ShadowStackSpiller() {
	var codegen: SsaMachGen;
	var order: SsaBlockOrder;
	def shadowVarMap = Vector<int>.new();
	def exits = Vector<SsaBlockInfo>.new();
	def reset(codegen: SsaMachGen, order: SsaBlockOrder) {
		this.codegen = codegen;
		this.order = order;
	}
	// Run the algorithm, inserting save and restore code.
	def run() {
		var lps = codegen.livepoints;
		if (lps.length == 0) return;  // nothing to do

		// Make a first pass over all livepoints.
		// Find the common dominator A of all blocks that contain livepoints
		// and compute the union of all variables used in all livepoints.
		var matrix = codegen.liveness;
		matrix.grow(matrix.numrows + 2);
		var allLive = matrix.numrows - 2;
		var tmpLive = matrix.numrows - 1;
		var blockA_i = lps[0].0.mark, blockA = order.order[blockA_i];
		matrix.copy(allLive, blockA_i);
		for (i = 1; i < lps.length; i++) {
			var t = lps[i], bm = t.0.mark, info = order.order[bm];
			matrix.or(allLive, bm); // union all livepoint sets
			if (info == blockA) continue;
			blockA = order.commonDominator(blockA, info);
		}

		// Find the lowest non-loop dominator of A
		for (p = blockA; p != null; p = p.dom_parent) {
			if (p.loop != null) blockA = p.dom_parent;
		}
		if (blockA == null) blockA = order.order[0];  // first block was a loop

		// Compute exits E from the region dominated by A, i.e. the dominance
		// frontier + actual throws/returns
		var range = (blockA.block.mark, blockA.dom_max);
		exits.resize(0);
		for (i = range.0; i < range.1; i++) {
			var bi = order.order[i], end = bi.block.end();
			if (end.succs.length == 0) {
				exits.put(bi);
				continue;
			}
			for (s in end.succs) {
				var target = s.dest.mark;
				if (target >= range.0 && target < range.1) continue;  // target is dominated
				if (end.succs.length == 1) {
					// one outgoing edge; mark the source as the exit
					exits.put(bi);
					break;
				} else {
					// multiple outgoing edges; mark the target as the exit
					exits.put(order.order[target]);
				}
			}
		}
		// Allocate a shadow stack pointer.
		var shadow_sp = codegen.newShadowSpTmp();

		// Initialize the shadow variable map.
		// Filter out all live variables that are either constants or do
		// not have a reference type. Allocate shadow spill slots for
		// all live reference variables.
		// XXX: improve shadow spill slot allocation with graph coloring.
		var numVars = codegen.vars.length;
		shadowVarMap.grow(numVars);
		shadowVarMap.length = numVars;
		var numShadowSlots = 0;
		for (i < numVars) {
			if (matrix[allLive, i]) {
				if (codegen.isRef(codegen.vars[i])) {
					shadowVarMap[i] = numShadowSlots++;
					continue;
				}
			}
			shadowVarMap[i] = -1;
			matrix[allLive, i] = false;
		}
		if (numShadowSlots == 0) return;  // no live references at any livepoint

		// Insert shadow frame allocation into A above first livepoint
		// and shadow frame deallocation into exit blocks.
		var curExit = 0;
		for (i = codegen.first; i != null; i = i.next) {
			if (i.opcode() != ArchInstrs.ARCH_BLOCK) continue;
			var label = Operand.Label.!(i.operands[0]);
			if (label.block == blockA.block) {
				// shadow stack allocation block
				var startOfBlock = i.next;
				codegen.insertShadowStackAlloc(shadow_sp, numShadowSlots, startOfBlock);
			} else if (curExit < exits.length && label.block == exits[curExit].block) {
				// exit block
				var endOfBlock = i.next; // TODO: compute end of block
				codegen.insertShadowStackFree(shadow_sp, numShadowSlots, endOfBlock);
				curExit++;
			}
		}

		// For every livepoint, we add a save before and a restore after for every variable.
		var start = tmpLive * matrix.width, end = start + matrix.width;
		for (j < lps.length) {
			var t = lps[j], i = t.1, lp = t.2.livepoint;
			matrix.copy(tmpLive, lp);
			matrix.and(tmpLive, allLive);  // filter non-refs and constants
			var before = i, after = i.next;

			for (j = start; j < end; j++) {
				var bits = matrix.bits[j];
				var varNum = (j - start) * 32;
				while (bits != 0) {
					if ((bits & 1) == 1) {
						// spill and restore varNum
						var vreg = codegen.vars[varNum], slot = shadowVarMap[varNum];
						codegen.insertShadowStackSave(shadow_sp, vreg, slot, before);
						codegen.insertShadowStackRestore(shadow_sp, vreg, slot, after);
					}
					bits = bits >>> 1;
					varNum++;
				}
			}
		}
	}
	def print() {
		var out = codegen.getOutput(), indent = 1;
		for (i = codegen.first; i != null; i = i.next) {
			indent = out.putInstr(indent, i);
			for (o in i.operands) match (o) {
				RefMap(livepoint, outgoing) => {
					out.putLiveness(codegen.liveness, livepoint + codegen.order.length);
				}
				_ => ;
			}
		}
	}
}
