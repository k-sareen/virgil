// Copyright 2013 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Constants representing flags for reachability analysis
enum RaFact {
	RM_LIVE,
	RF_NORMALIZED,
	RF_READ,
	RF_WRITTEN,
	RF_INIT,
	RF_VAL_ONE,
	RF_VAL_MANY,
	RC_ALLOC,
	RC_LIVE,
	RC_DUMPED,
	RC_EQUALITY,
	RC_VARIANT,
	RC_ENUM
}

def DUMP: Terminal;
def XXX: Terminal;
def NONE: RaFact.set;
def TRANSFERRABLE_FACTS = (Fact.M_ABSTRACT | Fact.M_INLINE | Fact.M_OPERATOR | Fact.M_NEW | Fact.M_EMPTY | Fact.M_EQUALS);
def countVals(facts: RaFact.set) -> int {
	return if(facts.RF_VAL_MANY, 2, if(facts.RF_VAL_ONE, 1));
}
def live(facts: RaFact.set) -> bool {
       	return (facts & (RaFact.RC_LIVE | RaFact.RC_ALLOC)) != NONE;
}

// global reachability information for primitive types, accessed frequently
def RA_VOID = TypeNorm.new(Void.TYPE, Void.TYPE, TypeUtil.NO_TYPES);
def RA_BOOL = TypeNorm.new(Bool.TYPE, Bool.TYPE, null);

def NO_RECORDS = Array<Record>.new(0);
def MONO_TYPEARGS = [AnyObject.TYPE];

def EQUALS_VST_METHOD = VstMethod.new(false, Token.new(null, "==", 0, 0), null, null, null, null);

// Performs polymorphic reachability analysis over a program.
class ReachabilityAnalyzer(compilation: Compilation) {
	def compiler = compilation.compiler;
	def prog = compilation.prog;
	def oldIr = prog.ir;
	def typeMap = TypeUtil.newTypeMap<TypeNorm>();
	def records = V3.newRecordMap<Record>();
	def polyMap = IrUtil.newIrItemMap<List<SsaApplyOp>>();
	def queue = WorkQueue.new();
	def heapTypes = Vector<TypeNorm>.new();
	var liveMethods = Vector<RaMethod>.new();

	// perform the analysis, starting from the roots
	def analyze() {
		for (i < oldIr.roots.length) {
			var meth = oldIr.roots[i].spec;
			getMethod(null, makeMethod(meth.typeArgs, meth.asMethod(), null));
			makeType(meth.receiver);
		}
		queue.drain(); // do all work
	}
	def transform() {
		ReachabilityNormalizer.new(this).normalize();
	}
	def dump() {
		liveMethods.apply(dumpMethod);
		heapTypes.apply(dumpType);
		records.apply(dumpRecord);
	}
	def dumpMethod(rm: RaMethod) {
		if (rm == null || rm.setFact(RaFact.RC_DUMPED)) return;
		DUMP.put1("%q", if (rm.spec != null, rm.spec.render, rm.orig.renderLong));
		dumpFacts(rm.raFacts, rm.virtual, null);
	}
	def dumpField(receiver: Type, rf: RaField) {
		if (rf == null) return;
		DUMP.put2("%q.%q", receiver.render, rf.orig.render);
		dumpFacts(rf.raFacts, null, rf.val);
	}
	def dumpType(rt: TypeNorm) {
		if (live(rt.raFacts)) {
			DUMP.put1("%q", rt.oldType.render);
			dumpFacts(rt.raFacts, null, null);
		}
		if (RaClass.?(rt)) {
			var rc = RaClass.!(rt);
			for (list in rc.methods) {
				for (l = list; l != null; l = l.tail) {
					dumpMethod(l.head);
				}
			}
			for (i = rc.fieldStart(); i < rc.fields.length; i++) {
				dumpField(rt.oldType, rc.fields[i]);
			}
		}
	}
	def dumpRecord(r: Record, x: Record) {
		if (!V3.isComponent(r.rtype)) DUMP.put2("%q #%d\n", r.rtype.render, r.id);
	}
	def dumpFacts(facts: RaFact.set, virtual: RaVirtual, val: Val) {
		if (facts.RF_READ) DUMP.put(" r");
		if (facts.RF_WRITTEN) DUMP.put(" w");
		if (facts.RF_INIT) DUMP.put(" i");
		if (facts.RM_LIVE) DUMP.put(" l");
		if (virtual != null) DUMP.put(" v");
		if (facts.RC_LIVE) DUMP.put(" l");
		if (facts.RC_ALLOC) DUMP.put(" a");
		if (facts.RC_VARIANT) DUMP.put(" t");
		if (facts.RC_EQUALITY) DUMP.put(" =");
		if (countVals(facts) == 1) {
			DUMP.put(" k");
			DUMP.put1(" = %s", V3.renderVal(val));
		}
		DUMP.ln();
	}
	// a quick check to see if a type is the same as its normalization
	def isNormalType(t: Type) -> bool {
		match(t.typeCon.kind) {
			V3Kind.BOOL, V3Kind.INT, V3Kind.CLASS => return true;
			V3Kind.ARRAY => return isNormalType(V3Array.elementType(t));
		}
		return false;
	}
	// defer analysis of a value
	def deferValue(val: Val) {
		if (val == null) return;
		if (Record.?(val) || Closure.?(val) || TupleVal.?(val)) queue.add(analyzeValue, val);
	}
	// analyze a value such as a record, closure, or tuple
	def analyzeValue(val: Val) {
		if (Record.?(val)) {
			// analyze a simple record
			analyzeRecord(Record.!(val));
		} else if (Closure.?(val)) {
			// analyze a record + method closure pair
			var closure = Closure.!(val), spec = closure.memberRef;
			var rm = makeMethod(spec.typeArgs, IrMethod.!(spec.member), null);
			getMethod(null, rm);
			if (closure.val != null) analyzeRecord(Record.!(closure.val));
		} else if (TupleVal.?(val)) {
			// recursively analyze tuple values
			for(e in (TupleVal.!(val)).values) analyzeValue(e);
		}
	}
	// analyze a record
	def analyzeRecord(record: Record) {
		if (records[record] == record) return;
		records[record] = record;
		var raType = makeType(record.rtype);
		var newlyLive = !live(raType.raFacts);
		raType.raFacts |= RaFact.RC_LIVE;
		if (RaClass.?(raType)) {
			// analyze a class object's fields and methods
			var rc = RaClass.!(raType);
			rc.instances = List.new(record, rc.instances);
			if (newlyLive) analyzeLiveClass(rc);
			// analyze class fields
			for (rf in rc.fields) analyzeField(record, rf);
		} else if (RaArray.?(raType)) {
			// analyze an array's elements
			var ra = RaArray.!(raType);
			ra.instances = List.new(record, ra.instances);
			if (ra.primitive) return;
			for (v in record.values) deferValue(v);
		}
	}
	// analyze a field of a record if the field is live
	def analyzeField(record: Record, rf: RaField) {
		if (rf != null && rf.raFacts.RF_READ) {
			var v = record.values[rf.orig.index];
			rf.addValue(v);
			deferValue(v);
		}
	}
	// analyze a class that just became live
	def analyzeLiveClass(rc: RaClass) {
		for (c = rc; c != null; c = c.parent) {
			c.subtypes = List.new(rc, c.subtypes);
			for (ml in c.methods) {
				for (l = ml; l != null; l = l.tail) analyzeVirtual(rc, l.head);
			}
			if (c.raFacts.RC_EQUALITY) rc.raFacts |= RaFact.RC_EQUALITY;
		}
	}
	// analyze a possible virtual dispatch of the given method on the given type
	def analyzeVirtual(rc: RaClass, rm: RaMethod) {
		var rv = rm.virtual;
		if (rv == null) return;
		var spec = oldIr.resolveMethodImpl(rc.oldType, rm.getSpec());
		var impl = makeMethod(spec.typeArgs, IrMethod.!(spec.member), null);
		rv.addImpl(impl);
		getMethod(null, impl);
	}
	def gatherCaseClasses(vec: Vector<IrClass>, decl: VstClass) -> Vector<IrClass> {
		if (decl.cases == null) return vec;
		for (c in decl.cases) {
			vec.put(oldIr.getIrClass(c.decl.getDeclaredType()));
			if (c.decl != decl) gatherCaseClasses(vec, c.decl);
		}
		return vec;
	}
	def generateVariantEquals(t: Type) -> RaClass {
		var rc = makeClass(t);
		while (rc.parent != null) rc = rc.parent;  // get root declaration.
		if (rc.orig.methods[IrUtil.EQUALS_METHOD_INDEX] != null) return rc; // done.

		var decl = V3.classDecl(rc.orig.ctype);
		var cases = gatherCaseClasses(Vector<IrClass>.new(), decl);
		var polyType = decl.getDeclaredType();

		var method = IrMethod.new(polyType, null, Function.sig(polyType, Bool.TYPE));
		method.source = EQUALS_VST_METHOD;
		method.setFact(Fact.M_EQUALS | Fact.M_INLINE);
		rc.orig.methods[IrUtil.EQUALS_METHOD_INDEX] = method;
		method.index = IrUtil.EQUALS_METHOD_INDEX;

		// build overridden methods for each case that has fields
		for (i < cases.length) {
			var ic = cases[i];
			var superType = V3.getSuperType(ic.ctype);
			if (superType == null) superType = ic.ctype;
			var pc = oldIr.getIrClass(superType);
			var pm = pc.methods[IrUtil.EQUALS_METHOD_INDEX];
			if (ic.fields.length > 0) {
				pm.facts |= Fact.M_OVERRIDDEN;
				pm = IrMethod.new(ic.ctype, null, Function.sig(polyType, Bool.TYPE));
				pm.source = EQUALS_VST_METHOD;
				pm.facts |= Fact.M_EQUALS;
				pm.index = IrUtil.EQUALS_METHOD_INDEX;
			}
			ic.methods[IrUtil.EQUALS_METHOD_INDEX] = pm;
		}
		return rc;
	}
	// analyze a method's code
	def analyzeMethod(rm: RaMethod) {
		var graph = rm.orig.ssa;
		if (graph == null) {
			if (rm.orig.facts.M_EQUALS) {
				var receiver = oldIr.getIrClass(rm.orig.receiver);
				var root = oldIr.getIrClass(V3.getRootType(receiver.ctype));
				var context = SsaContext.new(compiler, prog);
				graph = VariantComparatorGen.new(context, root, receiver, rm.orig).generate();
			} else {
				graph = compilation.genSsa(rm.getSpec(), 0);
			}
		}
		if (rm.spec != null) {
			// analyze a polymorphic method
			var polyOps = polyMap[rm.orig];
			if (polyOps == null) {
				analyzeValues(graph);
				polyOps = gatherPolyOps(graph);
				polyMap[rm.orig] = polyOps;
			}
			analyzePolyMethod(rm, polyOps);
		} else {
			analyzeValues(graph);
			// analyze a monomorphic method
			for (b in graph.bfBlocks()) { // XXX: iterate over blocks directly
				for (i = b.next; i != b; i = i.next) {
					if (SsaApplyOp.?(i)) analyzeOp(SsaApplyOp.!(i), rm.spec);
				}
			}
		}
	}
	// analyze the values in a graph
	def analyzeValues(graph: SsaGraph) {
		if (graph.values != null) {
			for (v in graph.values) if (v != null) analyzeValue(v.val);
		}
	}
	// gather polymorphic operators
	def gatherPolyOps(graph: SsaGraph) -> List<SsaApplyOp> {
		var polyOps: List<SsaApplyOp>;
		for (b in graph.bfBlocks()) { // XXX: iterate over blocks directly
			for (i = b.next; i != b; i = i.next) {
				if (SsaApplyOp.?(i)) {
					var apply = SsaApplyOp.!(i);
					if (apply.op.isPolymorphic()) polyOps = List.new(apply, polyOps);
					else analyzeOp(apply, null);
				}
			}
		}
		if (polyOps == null) polyOps = List.new(null, null); // add at least one element
		return polyOps;
	}
	// analyze a polymorphic method
	def analyzePolyMethod(rm: RaMethod, polyOps: List<SsaApplyOp>) {
		for (l = polyOps; l != null; l = l.tail) {
			if (l.head != null) analyzeOp(l.head, rm.spec);
		}
	}
	// analyze an operator
	def analyzeOp(op: SsaApplyOp, context: IrSpec) {
		match (op.op.opcode) {
			OverloadedEq,
			RefEq,
			VariantEq => analyzeEqualOnType(mono(op.op.typeArgs[0], context), context);
			ArrayAlloc,
			ArrayInit => allocation(makeType(mono(op.op.typeArgs[0], context)));
			ClassAlloc(method) => {
				var rm = opMethod(op, method, context);
				if (rm != null) getMethod(op, rm);
				allocation(makeType(mono(op.op.typeArgs[0], context)));
			}
			ClassGetVirtual(method) => getVirtual(opMethod(op, method, context));
			CallClassVirtual(method) => getVirtual(opMethod(op, method, context));
			ClassGetMethod(method) => getMethod(op, opMethod(op, method, context));
			CreateClosure(method) => getMethod(op, opMethod(op, method, context));
			CallMethod(method) => getMethod(op, opMethod(op, method, context));
			ClassGetField(field) => if (op.useList != null) getField(makeField(op, field, context));
			VariantGetField(field) => if (op.useList != null) getField(makeField(op, field, context));
			ComponentGetField(field) => if (op.useList != null) getField(makeField(op, field, context));
			ClassInitField(field) => initField(op, makeField(op, field, context));
			ClassSetField(field) => setField(op, makeField(op, field, context));
			ComponentSetField(field) => setField(op, makeField(op, field, context));
			PtrAtObjectField(field) => if (op.useList != null) getAndSetField(makeField(op, field, context));
			PtrAtComponentField(field) => if (op.useList != null) getAndSetField(makeField(op, field, context));
			_ => ;
		}
	}
	// analyze an equality comparison
	def analyzeEqualOnType(t: Type, context: IrSpec) {
		match (t.typeCon.kind) {
			V3Kind.CLASS => {
				getClassEquality(t);
			}
			V3Kind.VARIANT => {
				var rc = generateVariantEquals(t);
				getClassEquality(t);
				var rm = makeMethod([rc.oldType], rc.orig.methods[IrUtil.EQUALS_METHOD_INDEX], context);
				getVirtual(rm);
			}
		}
	}
	// analyze an access of a field
	def analyzeGetField(receiver: RaClass, rf: RaField) {
		for (t = receiver.subtypes; t != null; t = t.tail) { // for all live subtypes
			for (l = t.head.instances; l != null; l = l.tail) { // for all instances
				analyzeField(l.head, rf);
			}
		}
	}
	def allocation(raType: TypeNorm) {
		var oldFacts = raType.raFacts;
		raType.raFacts |= RaFact.RC_ALLOC;
		if (RaClass.?(raType) && !live(oldFacts)) {
			// process a newly-live class
			analyzeLiveClass(RaClass.!(raType));
		}
	}
	def getClassEquality(t: Type) {
		var rc = makeClass(t);
		if (rc.raFacts.RC_EQUALITY) return; // already marked.
		rc.raFacts |= RaFact.RC_EQUALITY;
		for (l = rc.subtypes; l != null; l = l.tail) l.head.raFacts |= RaFact.RC_EQUALITY;
	}
	def getVirtual(rm: RaMethod) {
		if (rm.isVirtual()) return;
		rm.virtual = RaVirtual.new(rm);
		var rc = makeClass(rm.receiver);
		for (l = rc.subtypes; l != null; l = l.tail) {
			analyzeVirtual(l.head, rm);
		}
	}
	def getMethod(op: SsaApplyOp, rm: RaMethod) {
		if (rm.setFact(RaFact.RM_LIVE)) return;
		liveMethods.put(rm);
		queue.add(analyzeMethod, rm);
		if (V3.isVariant(rm.receiver)) { // XXX: this is because of variant null replacement
			var rc = makeClass(rm.receiver);
			var newlyLive = !live(rc.raFacts);
			rc.raFacts |= RaFact.RC_LIVE;
			if (newlyLive) analyzeLiveClass(rc);
		}
	}
	def getField(rf: RaField) {
		if (rf.setFact(RaFact.RF_READ)) return;
		queue.add(analyzeGetField, (makeClass(rf.receiver), rf));
	}
	def getAndSetField(rf: RaField) {
		getField(rf);
		rf.raFacts |= RaFact.RF_WRITTEN;
		var none: Fact.set;
		rf.writeFacts = none;
		rf.setFact(RaFact.RF_VAL_MANY);
	}
	def setField(op: SsaApplyOp, rf: RaField) {
		rf.raFacts |= RaFact.RF_WRITTEN;
		var val = op.input1();
		rf.writeFacts = rf.writeFacts & val.facts & Facts.V_FACTS;
		if (SsaConst.?(val)) rf.addValue(SsaConst.!(val).val);
		else rf.setFact(RaFact.RF_VAL_MANY);
	}
	def initField(op: SsaApplyOp, rf: RaField) {
		var val = op.input1();
		if (SsaConst.?(val)) rf.addValue(SsaConst.!(val).val);
		else rf.setFact(RaFact.RF_VAL_MANY);
		if (!rf.raFacts.RF_INIT) {
			// first initialization seen of the field
			rf.raFacts |= RaFact.RF_INIT;
			rf.initFacts = val.facts & Facts.V_FACTS;
		} else {
			// not the first initialization seen
			rf.initFacts = rf.initFacts & val.facts & Facts.V_FACTS;
		}
	}
	def makeField(op: SsaApplyOp, f: IrField, context: IrSpec) -> RaField {
		var rf = f.raField;
		if (rf != null) return rf;
		var receiver = f.receiver, raType: RaClass;
		if (!receiver.open()) {
			// monomorphic receiver type
			raType = makeClass(receiver);
			if (isNormalType(f.fieldType)) {
				// the field is a simple, monomorphic, normalized field
				rf = raType.makeField(f, null, 1);
				return f.raField = rf;
			}
		} else {
			// polymorphic receiver type
			receiver = mono(op.op.typeArgs[0], context);
			raType = makeClass(receiver);
		}
		rf = raType.fields[f.index];
		if (rf == null) {
			// create the RaField from the normalized type
			var ft = f.fieldType;
			if (ft.open()) ft = f.fieldType.substitute(V3.getTypeArgs(receiver));
			var fieldType = makeType(ft);
			rf = raType.makeField(f, fieldType, fieldType.size);
		}
		return rf;
	}
	def opMethod(op: SsaApplyOp, m: IrMethod, context: IrSpec) -> RaMethod {
		if (m == null) return null;
		return makeMethod(op.op.typeArgs, m, context);
	}
	def makeMethod(typeArgs: Array<Type>, m: IrMethod, context: IrSpec) -> RaMethod {
		var rm = m.raMethod;
		if (rm != null) return rm; // RaMethod already cached

		var mono = isMonoMethod(typeArgs, m);
		if (mono && isNormMethod(m)) {
			// monomorphic and all params and returns are normalized
			var rc = makeClass(m.receiver);
			var rm = rc.makeMethod(m, null);
			rm.norm = IrMethod.new(m.receiver, null, m.sig);
			return transferFacts(mono, rm);
		}
		// search for existing specialization
		if (context != null) typeArgs = context.instantiateTypes(typeArgs);
		var rc = makeClass(typeArgs[0]);
		rm = rc.findMethod(m.index, typeArgs);
		if (rm != null) return rm;  // specialization found

		// not found; fully specialize and normalize the method
		var spec = if(!mono, IrSpec.new(rc.oldType, typeArgs, m));
		rm = rc.makeMethod(m, spec);
		var typeParams = if(rm.spec != null, rm.spec.getTypes().methodTypeArgs);
		// normalize the signature of the method by way of the function type
		var ftype = RaFuncType.!(makeType(if(rm.spec == null, m.sig.funcType(), rm.spec.getMethodType())));
		var ft = Function.CLOSURE.create(ftype.sub[0].nested); // correct the typecon; norm() returns FUNCREF type
		rm.norm = IrMethod.new(rc.oldType, typeParams, FuncType.!(ft).sig());
		return transferFacts(mono, rm);
	}
	def isMonoMethod(typeArgs: Array<Type>, m: IrMethod) -> bool {
		return typeArgs.length == 1 && !m.receiver.open();
	}
	def isNormMethod(m: IrMethod) -> bool {
		def sig = m.sig;
		for (t in sig.paramTypes) {
			if (!isNormalType(t)) return false;
		}
		if (sig.paramTypes.length > compiler.MaxParams) return false;
		if (sig.returnTypes.length > compiler.MaxReturnValues) return false;
		if (!isNormalType(sig.returnType())) return false;
		return true;
	}
	def transferFacts(mono: bool, rm: RaMethod) -> RaMethod {
		var m = rm.orig;
		rm.norm.facts = m.facts & TRANSFERRABLE_FACTS;
		rm.norm.source = m.source;
		if (mono) {
			rm.raFacts = RaFact.RF_NORMALIZED;
			m.raMethod = rm;  // cache if monomorphic
		}
		return rm;
	}
	def makeClass(t: Type) -> RaClass {
		return RaClass.!(makeType(t));
	}
	def makeType(t: Type) -> TypeNorm {
		if (t.open()) return V3.fail1("is open %q", t.render);
		// first check for primitive types
		match (t.typeCon.kind) {
			V3Kind.VOID => return RA_VOID;
			V3Kind.BOOL => return RA_BOOL;
		}
		// now check the hashmap
		var raType = typeMap[t];
		if (raType != null) return raType;
		// not in the hashmap, build appropriately
		match (t.typeCon.kind) {
			V3Kind.COMPONENT => {
				var compDecl = V3.componentDecl(t);
				deferValue(prog.getComponentRecord(compDecl));
				raType = newRaClass(t, Void.TYPE, oldIr.makeIrClass(t), null);
			}
			V3Kind.ARRAY => {
				// normalize element type
				var enorm = makeType(V3Array.elementType(t));
				if (enorm.size == 0) {
					raType = RaArray.new(t, V3.voidArrayType, null);
				} else if (enorm.sub == null) {
					raType = RaArray.new(t, V3Array.newType(enorm.newType), null);
				} else if (compiler.MixedArrays) {
					var ra = RaArray.new(t, V3Array.newType(enorm.newType), null);
					ra.enorm = enorm;
					raType = ra;
				} else {
					var et = Arrays.map(enorm.sub, V3Array.newType);
					raType = RaArray.new(t, Tuple.newType(Lists.fromArray(et)), et);
				}
				heapTypes.put(raType);
			}
			V3Kind.VARIANT => {
				var ic = oldIr.makeIrClass(t);
				var superType = V3.getSuperType(t), parent: RaClass;
				if (superType != null) {
					parent = makeClass(superType);
				} else {
					// make the default variant record for field analysis
					deferValue(V3.makeDefaultVariantRecord(prog, t));
				}
				var rc = newRaClass(t, t, ic, parent);
				rc.raFacts |= RaFact.RC_VARIANT;
				raType = rc;
			}
			V3Kind.CLASS => {
				var superType = V3.getSuperType(t);
				var parent = if(superType != null, makeClass(superType));
				var ic = oldIr.makeIrClass(t);
				if (ic == null) ic = IrClass.new(t, null, null, [], []);
				raType = newRaClass(t, t, ic, parent);
			}
			V3Kind.CLOSURE => {
				// translate closure into (funcref, object) pair
				var pt = limit(makeType(Function.getParamType(t)), compiler.MaxParams-1);
				var rt = limit(makeType(Function.getReturnType(t)), compiler.MaxReturnValues);
				var ft = Function.FUNCREF.create(Lists.cons2(pt.0, rt.0));
				var ta = [ft, AnyObject.TYPE];
				raType = RaFuncType.new(t, Tuple.newType(Lists.fromArray(ta)), pt.1, rt.1, ta);
			}
			V3Kind.TUPLE => {
				// flatten tuples
				var vecT = Vector<Type>.new();
				var vecO = Vector<int>.new();
				var vecN = Vector<TypeNorm>.new();
				for (p = t.nested; p != null; p = p.tail) {
					var n = makeType(p.head);
					vecO.put(vecT.length);
					vecN.put(n);
					n.addTo(vecT);
				}
				var ta = vecT.extract();
				raType = RaTuple.new(t, Tuple.newType(Lists.fromArray(ta)), ta, vecN.extract(), vecO.extract());
			}
			_ => {
				raType = TypeNorm.new(t, t, null);
			}
		}
		typeMap[t] = raType;
		return raType;
	}
	def newRaClass(oldType: Type, newType: Type, ic: IrClass, parent: RaClass) -> RaClass {
		var sub = if(newType == Void.TYPE, TypeUtil.NO_TYPES);
		var rc = RaClass.new(oldType, newType, sub, ic, parent);
		heapTypes.put(rc);
		return rc;
	}
	def norm(t: Type) -> Type {
		if (isNormalType(t)) return t;
		return makeType(t).newType;
	}
	def mono(t: Type, spec: IrSpec) -> Type {
		return if(spec != null, spec.instantiateType(t), t);
	}
	def limit(tn: TypeNorm, len: int) -> (Type, Array<Type>) {
//		XXX.put3("limit %q %q |%d|\n", tn.oldType.render, tn.newType.render, len);
		if (tn.size <= len) return (tn.newType, TypeUtil.NO_TYPES);
		if (tn.sub == null) return (Void.TYPE, [tn.newType]);
		var t = Tuple.fromTypeArray(Arrays.range(tn.sub, 0, len));
		return (t, Arrays.range(tn.sub, len, tn.sub.length));
	}
}
// Base class which contains facts for all types of entities during analysis
class RaItem {
	var raFacts: RaFact.set;
	// sets the given fact bit; returns true if the fact was already set
	def setFact(fact: RaFact.set) -> bool {
		if ((raFacts & fact) == NONE) {
			raFacts = raFacts | fact;
			return false;
		}
		return true;
	}
}

// Representation of a normalized integer type.
class RaIntType extends TypeNorm {
	def bigEndian: bool;
	new(oldType: Type, newType: Type, sub: Array<Type>, bigEndian)
		super(oldType, newType, sub) { }
	def bigEndIndex() -> int {
		return if(bigEndian, 0, size - 1);
	}
	def littleEndIndex() -> int {
		return if(bigEndian, size - 1, 0);
	}
	// Select {n} items from {input} corresponding to the low-order words.
	def getLowestN<T>(inputs: Array<T>, n: int) -> Array<T> {
		if (bigEndian) return Arrays.range(inputs, inputs.length - n, inputs.length); // [big,vN,...,v0]
		else return Arrays.range(inputs, 0, n);  // [v0,...,vN,big]
	}
	// Create a new array of {n} items, copying the low order words from {inputs} and
	// extending the upper words with {extend}.
	def growToN<T>(inputs: Array<T>, n: int, extend: T) -> Array<T> {
		var result = Array<T>.new(n);
		if (bigEndian) {
			var d = n - 1;
			for (i = inputs.length - 1; i >= 0; i--) result[d--] = inputs[i];
			while (d >= 0) result[d--] = extend;
		} else {
			var d = 0;
			for (i = 0; i < size; i++) result[d++] = inputs[i];
			while (d < result.length) result[d++] = extend;
		}
		return result;
	}
	// Simulate a shift left by {n} words, filling in the vacant entries with {extend}.
	def shiftLeft<T>(inputs: Array<T>, n: int, extend: T) {
		shift(true, inputs, n, extend);
	}
	// Simulate a shift right by {n} words, filling in the vacant entries with {extend}.
	def shiftRight<T>(inputs: Array<T>, n: int, extend: T) {
		shift(false, inputs, n, extend);
	}
	def shift<T>(left: bool, inputs: Array<T>, n: int, extend: T) {
		if (left == bigEndian) {
			var i = 0;
			while (i < size - n) { inputs[i] = inputs[i + n]; i++; }
			while (i < size) { inputs[i] = extend; i++; }
		} else {
			var i = size - 1;
			while (i >= n) { inputs[i] = inputs[i - n]; i--; }
			while (i >= 0) { inputs[i] = extend; i--; }
		}
	}
}
// Representation of a tuple
class RaTuple extends TypeNorm {
	def nested: Array<TypeNorm>;
	def offsets: Array<int>;
	new(oldType: Type, newType: Type, sub: Array<Type>, nested, offsets)
		super(oldType, newType, sub) { }
	def getElem<T>(array: Array<T>, index: int) -> Array<T> {
		var ntn = nested[index], offset = offsets[index];
		if (ntn == null) return [array[offset]];
		if (ntn.size == 1) return [array[offset]];
		return Arrays.range(array, offset, offset + ntn.size);
	}
}
// Representation of a class type during RMA and normalization, which adds
// representations of the fields and methods of the class
class RaClass extends TypeNorm {
	def orig: IrClass;			// original, polymorphic IrClass
	def parent: RaClass;			// super class, if any
	def fields = Array<RaField>.new(orig.fields.length);          // index of fields
	var methods = Array<List<RaMethod>>.new(orig.methods.length); // index of methods
	var instances: List<Record>;		// list of live records
	var children: List<RaClass>;		// list of all child classes
	var subtypes: List<RaClass>;		// list of live subtypes
	var normClass: IrClass;			// normalized class
	var normFields: Array<IrField>;		// normalized fields
	var normMethods: Array<IrMethod>;	// normalized methods
	var minClassId = -1;			// minimum class ID
	var maxClassId = -1;			// maximum class ID

	new(oldType: Type, newType: Type, sub: Array<Type>, orig, parent) super(oldType, newType, sub) {
		if (parent != null) {
			parent.children = List.new(this, parent.children);
			Arrays.copyInto(parent.fields, fields, 0);
		}
	}
	def makeField(f: IrField, fieldType: TypeNorm, size: int) -> RaField {
		return addField(RaField.new(oldType, f, fieldType, size));
	}
	private def addField(rf: RaField) -> RaField {
		fields[rf.orig.index] = rf;
		for (l = children; l != null; l = l.tail) l.head.addField(rf);
		return rf;
	}
	def fieldStart() -> int {
		return if(parent != null, parent.fields.length);
	}
	def makeMethod(m: IrMethod, spec: IrSpec) -> RaMethod {
		if (m.index >= methods.length) methods = Arrays.grow(methods, methods.length + m.index + 1);
		var rm = RaMethod.new(oldType, m, spec);
		methods[m.index] = List.new(rm, methods[m.index]);
		return rm;
	}
	def findMethod(index: int, typeArgs: Array<Type>) -> RaMethod {
		if (index >= methods.length) return null;
		for (l = methods[index]; l != null; l = l.tail) {
			if (compareTypeArgs(l.head, typeArgs)) return l.head;
		}
		return null;
	}
	def findRaMethod(rm: RaMethod) -> RaMethod {
		return findMethod(rm.orig.index, if(rm.spec == null, MONO_TYPEARGS, rm.spec.typeArgs));
	}
	def compareTypeArgs(rm: RaMethod, typeArgs: Array<Type>) -> bool {
		if (rm.spec == null) return typeArgs.length == 1;
		var mtypeArgs = rm.spec.typeArgs;
		for (i = 1; i < typeArgs.length; i++) {
			if (mtypeArgs[i] != typeArgs[i]) return false;
		}
		return true;
	}
}
// Information about an array, including its live instances
class RaArray extends TypeNorm {
	var primitive: bool;
	var instances: List<Record>;
	var enorm: TypeNorm; // for mixed arrays

	new(oldType: Type, newType: Type, sub: Array<Type>) super(oldType, newType, sub) {
		var elem = oldType.nested.head;
		match (elem.typeCon.kind) {
			V3Kind.INT, V3Kind.FLOAT, V3Kind.BOOL, V3Kind.VOID => primitive = true;
		}
	}
	def isMixed() -> bool {
		return enorm != null && enorm.size > 1;
	}
}
// Information about a function type, which might have a truncated signature
// because it has more parameters or returns than allowed by the target.
class RaFuncType extends TypeNorm {
	def ovfParamTypes: Array<Type>;
	def ovfReturnTypes: Array<Type>;
	var ovfParamFields: Array<IrSpec>;
	var ovfReturnFields: Array<IrSpec>;
	new(oldType: Type, newType: Type, ovfParamTypes, ovfReturnTypes, sub: Array<Type>) super(oldType, newType, sub) {
	}
	def sig() -> Signature {
		return FuncType.!(sub[0]).sig();
	}
}
// Information about a field, including whether it is initialized, written, read,
// and facts about each of the values written to the field
class RaField(receiver: Type, orig: IrField, fieldType: TypeNorm, size: int) extends RaItem {
	var val: Val;
	var initFacts = Facts.V_DEFAULT;
	var writeFacts = Facts.V_FACTS;
	var norm: Array<IrSpec>;
	var normIndex = -1;
	def facts() -> Fact.set {
		return initFacts & writeFacts;
	}
	def addValue(v: Val) {
		// add a value to the set for this field
                var count = countVals(raFacts);
		if (count == 1) {
			if (!Values.equal(val, v)) raFacts |= RaFact.RF_VAL_MANY;
		} else if (count == 0) {
			raFacts |= RaFact.RF_VAL_ONE;
			val = v;
		}
		// also set the facts that are true for all values and writes
		var wfacts = Facts.NONE;
		if (v == null) wfacts = Fact.V_ZERO;
		else if (Box<int>.?(v)) wfacts = Facts.intFacts(Int.unbox(v));
		else if (Box<bool>.?(v)) wfacts = if(Bool.unbox(v), Fact.V_NON_ZERO, Fact.V_ZERO);
		else wfacts = Fact.V_NON_ZERO;
		writeFacts = writeFacts & wfacts;
	}
	def isConst() -> bool {
        	var f = raFacts, count = countVals(f);
		if (count == 1) {
			if (f.RF_INIT) return true; // initialized and a value
			if (!f.RF_WRITTEN) return true; // a value and never written
			if (Values.equal(val, null)) return true; // always written null
		} else if (count == 0 && (f & (RaFact.RF_WRITTEN | RaFact.RF_INIT)) == NONE) {
			return true; // neither written nor initialized, nor any values
		}
		return false;
	}
}
// Information about a method, including any specialization, whether it is reusable
// across normalization, etc.
class RaMethod(receiver: Type, orig: IrMethod, spec: IrSpec) extends RaItem {
	var norm: IrMethod;
	var normIndex = -1;
	var virtual: RaVirtual;
	private var cachedSpec: IrSpec;
	def getSpec() -> IrSpec {
		if (cachedSpec != null) return cachedSpec;
		if (spec != null) return cachedSpec = spec;
		return cachedSpec = IrSpec.new(receiver, [receiver], orig);
	}
	def isLive() -> bool {
		return raFacts.RM_LIVE;
	}
	def isVirtual() -> bool {
		return virtual != null;
	}
}
// For signatures that have too many parameters or returns, a truncated version of the signature.
class RaSignature(orig: Signature, norm: Signature, overflowParams: Array<Type>, overflowReturns: Array<Type>) {
}
// Extra information about a virtual method.
class RaVirtual(raMethod: RaMethod) {
	var mtable: IrMtable;		// mtable used for machine-level virtual calls
	var devirtual: RaMethod;	// RA-devirtualized target, if any
	var impls: List<RaMethod>;	// list of all implementations
	var count = 0;
	def addImpl(rm: RaMethod) {
		if (count == 0) { devirtual = rm; count = 1; }
		if (count == 1 && devirtual != rm) { devirtual = null; count = 2; }
		for (l = impls; l != null; l = l.tail) {
			if (l.head == rm) return; // XXX: linear search for RaMethod
		}
		impls = List.new(rm, impls);
	}
}
// A target which prints out the results of reachability analysis
def raTarget = Aeneas.registerTarget(RaTarget.new());
class RaTarget extends Target("ra") {
	def configureCompiler(compiler: Compiler) {
		compiler.Reachability = true;
	}
	def configureProgram(prog: Program) {
		SystemCalls.install(prog);
	}
	def emit(compiler: Compiler, prog: Program) {
		IrPrinter.new(prog).print();
	}
}
// Generates the comparator method for a (polymorphic) variant type.
class VariantComparatorGen(context: SsaContext, root: IrClass, receiver: IrClass, method: IrMethod) {
	var graph: SsaGraph;
	var p0: SsaInstr, p1: SsaInstr;
	def generate() -> SsaGraph {
		context.enterMethod(method);

		var tag = V3.classDecl(receiver.ctype).variantTag;
		var params = Array<SsaParam>.new(2);
		p0 = params[0] = SsaParam.new(0, receiver.ctype);
		p1 = params[1] = SsaParam.new(1, root.ctype);
		if (tag > 0) p0.facts |= Fact.V_NON_ZERO;
		method.ssa = context.graph = graph = SsaGraph.new(params, Bool.TYPE);

		if (tag == -1) genCompareTag();
		else genCompareFields(tag);

		context.printSsa("Generated");
		return graph;
	}
	def genCompareTag() {
		var b = newBuilder(graph.startBlock);
		var op = V3Op.newVariantGetTag(root.ctype);
		var t0 = b.addApply(null, op, [p0]);
		var t1 = b.addApply(null, op, [p1]);
		var cmp = b.opEqual(op.sig.returnType(), t0, t1);
		b.addReturn([cmp]);
	}
	def genCompareFields(tag: int) {
		var b = newBuilder(graph.startBlock);
		var falseBlock = SsaBlock.new();
		addReturnBool(falseBlock, false);

		var fieldCompare: SsaBlock;
		if (tag == 0) {
			// check p1 for null
			var eqNull1 = SsaBlock.new(), neNull1 = SsaBlock.new();
			b.addIfNull(p1, eqNull1, neNull1);
			b = newBuilder(eqNull1);
			// check p0 for null
			var neNull0a = SsaBlock.new();
			var trueBlock = SsaBlock.new();
			b.addIfNull(p0, trueBlock, neNull0a);
			addReturnBool(trueBlock, true);
			b = newBuilder(neNull0a);
			// if p0 is null, compare p1 fields with default
			genFieldComparisonsWithDefault(false, b, p0, falseBlock);

			b = newBuilder(neNull1);
			var eqNull0b = SsaBlock.new(), neNull0b = SsaBlock.new();
			b.addIfNull(p0, eqNull0b, neNull0b);
			b = newBuilder(eqNull0b);
			genFieldComparisonsWithDefault(true, b, p1, falseBlock);

			fieldCompare = neNull0b;
		} else {
			// check p1 for null
			var neNull1 = SsaBlock.new();
			b.addIfNull(p1, falseBlock, neNull1);
			fieldCompare = neNull1;
		}
		// compare tags and all field values
		b = newBuilder(fieldCompare);

		var op = V3Op.newVariantGetTag(root.ctype);
		var get = b.addApply(null, op, [p1]);
		get.facts |= Fact.O_NO_NULL_CHECK;
		var cmp = b.opEqual(op.sig.returnType(), get, graph.intConst(tag));

		var eqTag = SsaBlock.new();
		b.addIf(cmp, eqTag, falseBlock);
		b = newBuilder(eqTag);
		p1 = b.opTypeSubsume(root.ctype, receiver.ctype, p1);
		p1.setFact(Fact.O_NO_NULL_CHECK | Fact.V_NON_ZERO);
		genFieldComparisons(b, falseBlock);
	}
	def genFieldComparisons(b: SsaBuilder, falseBlock: SsaBlock) {
		// compare each field
		for (f in receiver.fields) {
			var spec = IrSpec.new(receiver.ctype, [receiver.ctype], f);
			var f0 = b.opGetField(spec, p0);
			var f1 = b.opGetField(spec, p1);
			f0.facts |= Fact.O_NO_NULL_CHECK;
			f1.facts |= Fact.O_NO_NULL_CHECK;
			var cmp = b.opEqual(f.fieldType, f0, f1);
			if (f.index == receiver.fields.length - 1) {
				// last field
				b.addReturn([cmp]);
				return;
			}
			var cont = SsaBlock.new();
			b.addIf(cmp, cont, falseBlock);
			b = newBuilder(cont);
		}
		b.addReturn([graph.trueConst()]);
	}
	def genFieldComparisonsWithDefault(compareTag: bool, b: SsaBuilder, p0: SsaInstr, falseBlock: SsaBlock) {
		if (compareTag) {
			var cont = SsaBlock.new();
			var t0 = V3Op.newVariantGetTag(root.ctype);
			var get = b.addApply(null, t0, [p0]);
			get.facts |= Fact.O_NO_NULL_CHECK;
			var cmp = b.opEqual(t0.sig.returnType(), get, graph.nullConst(t0.sig.returnType()));
			if (receiver.fields.length > 0) {
				b.addIf(cmp, cont, falseBlock);
				b = newBuilder(cont);
				p0 = b.opTypeSubsume(root.ctype, receiver.ctype, p0);
			} else {
				b.addReturn([cmp]);
				return;
			}
		}
		// compare each field with the default value
		for (f in receiver.fields) {
			var spec = IrSpec.new(receiver.ctype, [receiver.ctype], f);
			var f0 = b.opGetField(spec, p0);
			var f1 = graph.nullConst(f.fieldType);
			f0.facts |= Fact.O_NO_NULL_CHECK;
			var cmp = b.opEqual(f.fieldType, f0, f1);
			if (f.index == receiver.fields.length - 1) {
				// last field
				b.addReturn([cmp]);
				return;
			}
			var cont = SsaBlock.new();
			b.addIf(cmp, cont, falseBlock);
			b = newBuilder(cont);
		}
		b.addReturn([graph.trueConst()]);
	}
	def newBuilder(block: SsaBlock) -> SsaBuilder {
		return SsaBuilder.new(context, graph, block);
	}
	def addReturnBool(block: SsaBlock, val: bool) {
		SsaBuilder.new(context, graph, block).addReturn([graph.boolConst(val)]);
	}
}
// Globally shareable normalizers.
component IntNormalizers {
	def I32LE = IntNormalizer.new(32, false);
	def I64LE = IntNormalizer.new(64, false);
}
// Reports code that is neither used during initialization nor reachable from main().
class DeadCodeAnalyzer(ra: ReachabilityAnalyzer) {
	def buf = TerminalBuffer.new();
	def report() {
		ra.typeMap.apply(processType);
		for (i < ra.prog.ir.classes.length) {
			var c = ra.prog.ir.classes[i];
			processIrClass(c);
			reportClass(c);
		}
	}
	def reportClass(ic: IrClass) {
		buf.reset();
		if (!ic.facts.X_LIVE && !isSynthetic(ic)) {
			// the entire class is dead
			addLine("dead ", ic);
		} else {
			// report dead fields if any
			for (f in ic.fields) {
				if (ic.inherits(f)) continue;
				if (!f.facts.X_LIVE) {
					if (buf.length == 0) addLine("within ", ic);
					buf.puts("  dead field: ");
					f.render(buf.red());
					buf.end().ln();
				}
			}
			// report dead methods if any
			for (m in ic.methods) {
				if (m == null) continue;
				if (ic.inherits(m)) continue;
				if (m.facts.M_EMPTY) continue;
				if (!m.facts.X_LIVE) {
					if (buf.length == 0) addLine("within ", ic);
					buf.puts("  dead method: ");
					m.render(buf.red());
					buf.end().ln();
				}
			}
		}
		buf.outt();
	}
	def addLine(p: string, ic: IrClass) {
		buf.puts(p);
		if (V3.isVariant(ic.ctype)) buf.puts("variant ");
		else if (V3.isClass(ic.ctype)) buf.puts("class ");
		else if (V3.isComponent(ic.ctype)) {
			if (isSynthetic(ic)) buf.puts("file ");
			else buf.puts("component ");
		}
		ic.ctype.render(buf.red());
		buf.end().ln();
	}
	def isSynthetic(ic: IrClass) -> bool {
		return V3.isComponent(ic.ctype) && V3.componentDecl(ic.ctype).isSynthetic;
	}
	def processIrClass(ic: IrClass) {
		for (f in ic.fields) {
			if (f.facts.X_LIVE) markMember(f);
		}
		for (m in ic.methods) {
			if (m != null && m.ic != null) markMember(m);
		}
	}
	def processType(t: Type, tn: TypeNorm) {
		if (!RaClass.?(tn)) return;
		var rc = RaClass.!(tn);
		for (f in rc.fields) {
			if (f == null) continue;
			if (f.raFacts.RF_READ) markMember(f.orig);
		}
		for (ml in rc.methods) {
			for (l = ml; l != null; l = l.tail) {
				var m = l.head;
				if (m.raFacts.RM_LIVE) markMember(m.orig);
			}
		}
		if (live(rc.raFacts) || rc.orig.facts.X_LIVE) {
			while (rc != null) {
				rc.orig.facts |= Fact.X_LIVE;
				rc = rc.parent;
			}
		}
	}
	def markMember(m: IrMember) {
		m.facts |= Fact.X_LIVE;
		ra.prog.ir.getIrClass(m.receiver).facts |= Fact.X_LIVE;
	}
}
