// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Represents the statically-known part of an operation, not including the types.
type Opcode {
	// Boolean operators
	case BoolEq;
	case BoolAnd;
	case BoolOr;
	case BoolNot;
	// Integer arithmetic and conversions
	case IntEq;
	case IntAdd;
	case IntSub;
	case IntMul;
	case IntDiv;
	case IntMod;
	case IntAnd;
	case IntOr;
	case IntXor;
	case IntShl;
	case IntSar;
	case IntShr;
	case IntLt;
	case IntLteq;
	case IntWide(op: Operator);
	// Floating point arithmetic
	case FloatAdd(isDouble: bool);
	case FloatSub(isDouble: bool);
	case FloatMul(isDouble: bool);
	case FloatDiv(isDouble: bool);
	case FloatBitEq(isDouble: bool);
	case FloatEq(isDouble: bool);
	case FloatNe(isDouble: bool);
	case FloatLt(isDouble: bool);
	case FloatLteq(isDouble: bool);
	case FloatAbs(isDouble: bool);
	case FloatCeil(isDouble: bool);
	case FloatFloor(isDouble: bool);
	case FloatSqrt(isDouble: bool);
	// Integer casts and conversions
	case IntCastI;
	case IntCastF(isDouble: bool);
	case IntQueryI;
	case IntQueryF(isDouble: bool);
	case IntPromoteI;
	case IntViewI;
	case IntViewF(isDouble: bool);
	case IntTruncF(isDouble: bool);
	// Floating point casts and conversions
	case FloatCastI(isDouble: bool);
	case FloatCastD;
	case FloatQueryI(isDouble: bool);
	case FloatQueryD;
	case FloatPromoteI(isDouble: bool);
	case FloatPromoteF;
	case FloatViewI(isDouble: bool);
	case FloatRoundI(isDouble: bool);
	case FloatRound(isDouble: bool);
	case FloatRoundD;
	// Reference equality
	case RefEq;
	// Tuple operations
	case TupleCreate(length: int);
	case TupleGetElem(index: int);
	// Array operations
	case ArrayAlloc;
	case ArrayInit(length: int);
	case ArrayTupleInit(elems: int, length: int);
	case ArrayGetElem;
	case ArraySetElem;
	case ArrayGetElemElem(index: int);
	case ArraySetElemElem(index: int);
	case ArrayGetLength;
	// Component operations
	case Init(method: IrMethod);
	case ComponentGetField(field: IrField);
	case ComponentSetField(field: IrField);
	// Class operations
	case ClassAlloc(method: IrMethod);
	case ClassGetField(field: IrField);
	case ClassInitField(field: IrField);
	case ClassSetField(field: IrField);
	case ClassGetMethod(method: IrMethod);
	case ClassGetVirtual(method: IrMethod);
	case ClassGetSelector(selector: IrSelector);
	// Variant operations
	case VariantEq;
	case VariantGetTag;
	case VariantGetField(field: IrField);
	case VariantReplaceNull;
	// Safety checks
	case NullCheck;
	case BoundsCheck;
	case ConditionalThrow(exception: string);
	// Overloaded, polymorphic casts
	case OverloadedEq;
	case TypeCast(cast: TypeCast);
	case TypeQuery(query: TypeQuery);
	case TypeSubsume;
	// Closure and call operations
	case CallMethod(method: IrMethod);
	case CallClassVirtual(method: IrMethod);
	case CallClassSelector(selector: IrSelector);
	case CallClosure;
	case CallFunction;
	case CreateClosure(method: IrMethod);
	case ForgeClosure;
	case UnpackClosure;
	// System operations
	case SystemCall(syscall: SystemCall);
	// Container for VST operations
	case VstSugar(op: VstOperator);

// ------- Machine-level operations ---------------------------------------------
	// Pointer operations
	case PtrAdd;
	case PtrSub;
	case PtrLt;
	case PtrLteq;
	case PtrAtContents;
	case PtrAtLength;
	case PtrAtObject;
	case PtrAtElement;
	case PtrAtComponentField(field: IrField);
	case PtrAtObjectField(field: IrField);
	case PtrCmpSwp;
	case PtrLoad;
	case PtrStore;
	// Get caller instruction pointer or stack pointer
	case CallerIp;
	case CallerSp;
	// Allocate raw memory
	case Alloc;
	// Call
	case CallAddress(p: Mach_FuncRep);
	case CallKernel(kernel: Kernel);
}

component Opcodes {
	def table = Array<Fact.set>.new(120);
	new() {
		// shorthand for SSA optimization facts
		var F = Fact.O_FOLDABLE;
		var P = Fact.O_PURE | Fact.O_FOLDABLE; // pure => foldable
		var C = Fact.O_COMMUTATIVE;
		var A = Fact.O_ASSOCIATIVE;
		var NZ   = Fact.V_NON_ZERO;
		var NNEG = Fact.V_NON_NEGATIVE;
		var NNC = Fact.O_NO_NULL_CHECK;
                var NONE = Facts.NONE;

		// register all operators and their optimization facts
		op0(Opcode.BoolEq.tag,			P  |C);
		op0(Opcode.BoolAnd.tag, 		P|A|C);
		op0(Opcode.BoolOr.tag, 			P|A|C);
		op0(Opcode.BoolNot.tag, 		P    );

		op0(Opcode.IntEq.tag,			P  |C);
		op1(Opcode.IntAdd.tag, 			P|A|C);
		op1(Opcode.IntSub.tag, 			P    );
		op1(Opcode.IntMul.tag, 			P|A|C);
		op1(Opcode.IntDiv.tag, 			F    );
		op1(Opcode.IntMod.tag, 			F    );
		op1(Opcode.IntAnd.tag, 			P|A|C);
		op1(Opcode.IntOr.tag, 			P|A|C);
		op1(Opcode.IntXor.tag, 			P|A|C);
		op1(Opcode.IntShl.tag, 			P    );
		op1(Opcode.IntSar.tag, 			P    );
		op1(Opcode.IntShr.tag, 			P    );
		op1(Opcode.IntLt.tag, 			P    );
		op1(Opcode.IntLteq.tag, 		P    );
		op1(Opcode.IntWide.tag, 		P    );

		op1(Opcode.FloatAdd.tag,		P|A|C);
		op1(Opcode.FloatSub.tag,		P    );
		op1(Opcode.FloatMul.tag,		P|A|C);
		op1(Opcode.FloatDiv.tag,		P    );
		op1(Opcode.FloatBitEq.tag,		P  |C);
		op1(Opcode.FloatEq.tag,			P  |C);
		op1(Opcode.FloatNe.tag,			P  |C);
		op1(Opcode.FloatLt.tag,			P    );
		op1(Opcode.FloatLteq.tag,		P    );
		op0(Opcode.FloatAbs.tag,		P    );
		op0(Opcode.FloatCeil.tag,		P    );
		op0(Opcode.FloatFloor.tag,		P    );
		op0(Opcode.FloatSqrt.tag,		P    );

		op0(Opcode.IntCastI.tag,		F    );
		op0(Opcode.IntCastF.tag,		F    );
		op0(Opcode.IntQueryI.tag,		P    );
		op0(Opcode.IntQueryF.tag,		P    );
		op0(Opcode.IntViewI.tag, 		P    );
		op0(Opcode.IntPromoteI.tag,		P    );
		op0(Opcode.IntViewI.tag,		P    );
		op0(Opcode.IntViewF.tag,		P    );
		op0(Opcode.IntTruncF.tag,		P    );

		op0(Opcode.FloatCastI.tag,		F    );
		op0(Opcode.FloatCastD.tag,		F    );
		op0(Opcode.FloatQueryI.tag,		P    );
		op0(Opcode.FloatQueryD.tag,		P    );
		op0(Opcode.FloatPromoteI.tag,		P    );
		op0(Opcode.FloatPromoteF.tag,		P    );
		op0(Opcode.FloatViewI.tag,		P    );
		op0(Opcode.FloatRoundI.tag,		P    );
		op0(Opcode.FloatRound.tag,		P    );
		op0(Opcode.FloatRoundD.tag,		P    );

		op0(Opcode.RefEq.tag,			P  |C);

		op0(Opcode.TupleCreate.tag, 		P);
		op1(Opcode.TupleGetElem.tag, 		P);

		op0(Opcode.ArrayAlloc.tag, 		NZ);
		op1(Opcode.ArrayInit.tag, 		NZ);
		op0(Opcode.ArrayGetElem.tag, 		NONE);
		op0(Opcode.ArraySetElem.tag, 		NONE);
		op0(Opcode.ArrayGetLength.tag, 		F|NNEG);

		op1(Opcode.Init.tag, 			NONE);
		op1(Opcode.ComponentGetField.tag, 	NNC);
		op1(Opcode.ComponentSetField.tag, 	NNC);

		op1(Opcode.ClassAlloc.tag, 		NZ);
		op1(Opcode.ClassGetField.tag, 		NONE);
		op1(Opcode.ClassSetField.tag, 		NONE);
		op1(Opcode.ClassInitField.tag, 		Fact.O_NO_NULL_CHECK);
		op1(Opcode.ClassGetMethod.tag, 		NZ|F);
		op1(Opcode.ClassGetVirtual.tag, 	NZ|F);
		op1(Opcode.ClassGetSelector.tag, 	NZ|F);

		op0(Opcode.VariantEq.tag,		P  |C);
		op0(Opcode.VariantGetTag.tag,		P|NNEG);
		op1(Opcode.VariantGetField.tag, 	P);
		op1(Opcode.VariantReplaceNull.tag, 	P|NZ);

		op0(Opcode.NullCheck.tag, 		F|NZ);
		op0(Opcode.BoundsCheck.tag, 		F);
		op1(Opcode.ConditionalThrow.tag, 	F);

		op0(Opcode.OverloadedEq.tag,		P  |C);
		op1(Opcode.TypeCast.tag, 		F    );
		op1(Opcode.TypeQuery.tag, 		P    );
		op0(Opcode.TypeSubsume.tag, 		P    );

		op1(Opcode.CallMethod.tag, 		NONE);
		op1(Opcode.CallClassVirtual.tag, 	NONE);
		op1(Opcode.CallClassSelector.tag, 	NONE);
		op0(Opcode.CallClosure.tag, 		NONE);
		op0(Opcode.CallFunction.tag, 		NONE);
		op1(Opcode.CreateClosure.tag, 		NZ|P|NNC);
		op1(Opcode.ForgeClosure.tag, 		P|NNC);
		op1(Opcode.UnpackClosure.tag, 		P|NNC);

		op0(Opcode.SystemCall.tag, 		NONE);

		op0(Opcode.PtrAdd.tag,		P); // XXX: could be foldable with offset
		op0(Opcode.PtrSub.tag,		P);
		op0(Opcode.PtrLt.tag,		P);
		op0(Opcode.PtrLteq.tag,		P);
		op0(Opcode.PtrAtContents.tag,	P);
		op0(Opcode.PtrAtLength.tag,	P);
		op0(Opcode.PtrAtObject.tag,	P);
		op0(Opcode.PtrAtElement.tag,	F);
		op0(Opcode.PtrAtComponentField.tag,	P);
		op0(Opcode.PtrAtObjectField.tag,	F);
		op0(Opcode.PtrLoad.tag,		NONE);
		op0(Opcode.PtrStore.tag,	NONE);

		op0(Opcode.CallerIp.tag,	P);
		op0(Opcode.CallerSp.tag,	P);

		op0(Opcode.Alloc.tag,		NONE);

		op0(Opcode.CallAddress.tag,	NONE);
		op0(Opcode.CallKernel.tag,	NONE);
	}

	private def op0(opcode: byte, f: Fact.set) { table[opcode] = f; }
	private def op1(opcode: byte, f: Fact.set) { table[opcode] = f; }

	def facts(opcode: Opcode) -> Fact.set { return table[opcode.tag]; }
}
