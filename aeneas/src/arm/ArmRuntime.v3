// Copyright 2014 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Base class for runtime systems on arm, such as arm-darwin, arm-linux, etc
class ArmRuntime extends MachRuntime {
	def context: SsaContext;
	def test: bool;

	def PAGE_SIZE = 4096;
	def debugMach = Aeneas.PRINT_MACH.val != VstMatcher.None;
	var allocator: ArmAllocator;
	var header: MachO_Header;
	new(context, test, mach: MachProgram) super(mach) {
		allocator = ArmAllocator.new(mach, Aeneas.RT_GC.get(), Aeneas.RT_TEST_GC.get());
	}

	def emit();
	def pageAlign(v: int) -> int {
		return (v + PAGE_SIZE - 1) & (-1 ^ (PAGE_SIZE - 1));
	}
	def genArmCode(irm: IrMethod, codegen: ArmCodeGen) {
		context.enterMethod(irm);
		context.graph.resetMarks(null);
		var frame = MachFrame.new(ArmVirgilCallConv.getForGraph(context.graph), mach.data.addrAlign);
		codegen.generate(irm, frame);
	}
	def genTestInputs(main: IrMethod, asm: ArmMacroAssembler, frame: MachFrame) {
		// TODO: "argc" is on the top of the stack on arm-linux ?
		// TODO: asm.movd_r_rm(ArmRegs.EBX, ArmRegs.ESP.indirect()); // load "argc"
		var params = main.ssa.params, conv = frame.conv;
		var vals = parseTestInputs(context.prog, context.prog.ERROR, params.length - 1);
		var w = MachDataWriter.!(asm.w);
		if (conv.overflow > 0) {
			// allocate space for overflow arguments
			// TODO: asm.sub.rm_i(ArmRegs.ESP, conv.overflow * mach.data.addressSize);
		}
		for (i < conv.paramLocs.length) {
			// TODO: load argument values
		}
	}
	def genSigInstalls(asm: ArmAssembler) {
		genSigHandlerInstall(asm, 8, getFatalAddress(V3Exception.DivideByZero));
		genSigHandlerInstall(asm, 10, getFatalAddress(V3Exception.NullCheck));
		genSigHandlerInstall(asm, 11, getFatalAddress(V3Exception.NullCheck));
	}
	def genMainInit(asm: ArmMacroAssembler, frame: MachFrame) {
		// call RiRuntime.init() if it exists
		if (ri_init >= 0) return genRiInit(asm, frame);
		// if this is a test, install custom signal handlers
		if (test) return genSigInstalls(asm);
		// TODO: remove compiler-generated initialization of args
		if (frame.conv.paramTypes.length <= 1) return; // don't bother, main doesn't use it

		// ======================================================================
		// TODO: initialize arg array from OS-supplied argv and envp
		// ======================================================================

	}
	def genRiInit(asm: ArmMacroAssembler, frame: MachFrame) {
		// generate a call to the RiRuntime.init() method
		var init_meth = getRiInit();
		var addr = mach.addrOfMethod(init_meth);
		var frame = getFrame(init_meth.ssa), conv = frame.conv;

		// ======================================================================
		// TODO: call runtime initialization function from entry stub
		// ======================================================================

	}
	def asmArrayAlloc(asm: ArmAssembler, arrayType: Type, dest: ArmReg, len: ArmReg) {
		// ======================================================================
		// TODO: inline assembly for allocating arrays
		// ======================================================================
	}
	def asmAlloc(asm: ArmAssembler, reg: ArmReg) {
		// ======================================================================
		// TODO: inline assembly for allocating
		// ======================================================================
	}
	def recordPatch(asm: ArmAssembler, addr: Addr) {
		MachDataWriter.!(asm.w).recordPatch(addr, asm.pos() - 4);
	}
	def genMainStub(asm: ArmMacroAssembler) {
		var main = context.prog.getMain().asMethod();
		var frame = getFrame(main.ssa);
		// initialize runtime if necessary
		genMainInit(asm, frame);
		if (test) genTestInputs(main, asm, frame);
		// call main
		// TODO: asm.call_addr(mach.addrOfMethod(main));
		// write return value to stdout if this is a test
		if (test) genTestOutput(asm, frame);
		// exit with the return value of main
		if (main.sig.returnTypes.length == 0) return asm_exit_code(asm, 0);
		asm_exit_r(asm, asm.loc_r(frame, frame.conv.callerRet(0)));
	}
	def getFrame(ssa: SsaGraph) -> MachFrame {
		var frame = MachFrame.new(ArmVirgilCallConv.getForGraph(ssa), mach.data.addrAlign);
		frame.frameSize = mach.data.addressSize;
		return frame;
	}
	def patchCodeAddr(w: DataWriter, a: Addr, posAddr: int, pos: int) {
		var abs = mach.absolute(a);
		if (debugMach) {
			TerminalBuffer.new()
				.puts("patch-code @ ")
				.putx(posAddr)
				.puts(" <- ")
				.putv(a, null)
				.puts(" = ")
				.putx(abs)
				.outln();
		}
		if (w.data[pos] == 0x05) {
			// encode a RIP-relative address
			abs = abs - (posAddr + 4);
		}
		w.at(pos).put_b32(abs);
	}

	// abstract methods
	def genSigHandlerInstall(asm: ArmAssembler, signo: int, handler: Addr);
	def asm_exit_code(asm: ArmAssembler, code: int);
	def asm_exit_r(asm: ArmAssembler, loc: ArmReg);
	def genTestOutput(asm: ArmMacroAssembler, frame: MachFrame);
}
// Handles assembly-level details of allocating memory on arm.
class ArmAllocator {
	def mach: MachProgram;
	def stub: bool;
	def alwaysGc: bool;
	var objLoc: int;
	var sizeLoc: int;
	var allocStubAddr: Addr;
	var frame: MachFrame;
	var gcmeth: IrMethod;

	new(mach, stub, alwaysGc) { }
	def init(getFrame: SsaGraph -> MachFrame) {
		if (!stub) return;
		// initialize locations based on calling convention to RiRuntime.gc()
		allocStubAddr = Address.new(mach.codeRegion, "alloc_stub");
		gcmeth = mach.runtime.getRiInit();
		if (gcmeth != null) {
			// call the RiRuntime.gc() method
			frame = getFrame(gcmeth.ssa);
			objLoc = frame.conv.calleeRet(0);
			sizeLoc = frame.conv.calleeParam(1); // param 0 = "this"
		} else {
			// there is no appropriate RiRuntime.gc() method
			// TODO: objLoc = ArmMachRegs.R0;
			// TODO: sizeLoc = ArmMachRegs.R0;
		}
	}
	def asm_alloc_test(gen: ArmCodeGen, dest: int, sz: int, source: Source) {
		// TODO: exchange-add [CiRuntime.heapCurLoc] with size
	}
	def asm_alloc_rt(gen: ArmCodeGen, lp: int, source: Source) {
		// TODO: call a shared allocation stub routine
		var off = gen.asm.codeOffset();
		// if (gen.rtgc != null) gen.rtgc.recordStackRefMap(off, source, gen.buildStackMap(off, null, lp));
		// if (gen.rtsrc != null) gen.rtsrc.recordReturnSource(off, source);
	}
	def genAllocStub(asm: ArmMacroAssembler) {
		if (!stub) return;
		// generate the shared allocation routine
		allocStubAddr.absolute = asm.machBuffer.endAddr();
		var sizeReg = asm.loc_r(frame, sizeLoc);
	}
}
