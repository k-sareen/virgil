// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def Regs: X86_64RegSet;

// TODO: 64-bit object header, or just align?
// TODO: negative object headers

class X86_64Backend extends MachBackend {
	var asm: X86_64MacroAssembler;
	def test: bool;

	def debugMach = Aeneas.PRINT_MACH.val != VstMatcher.None;
	var codegen: SsaX86_64Gen;
	var simpleAlloc: SimpleRegAlloc;

	// memory allocator configuration
	def allocStub: bool = Aeneas.RT_GC.get();
	def alwaysGc: bool = Aeneas.RT_TEST_GC.get();
	var objLoc: int;
	var sizeLoc: int;
	var allocStubAddr: Addr;
	var frame: MachFrame;
	var gcmeth: IrMethod;

	new(compiler: Compiler, prog: Program, mach: MachProgram, w: MachDataWriter, test)
		super(compiler, prog, mach, w) {

		asm = X86_64MacroAssembler.new(w);
		if (allocStub) {
			// initialize locations based on calling convention to RiRuntime.gc()
			allocStubAddr = Address.new(mach.codeRegion, "alloc_stub");
			gcmeth = mach.runtime.getRiGc();
			if (gcmeth != null) {
				// call the RiRuntime.gc() method
				frame = computeFrameSize(getFrame(gcmeth.ssa));
				objLoc = frame.conv.calleeRet(0);
				sizeLoc = frame.conv.calleeParam(1); // param 0 = "this"
			} else {
				// there is no appropriate RiRuntime.gc() method
				objLoc = Regs.RAX;
				sizeLoc = Regs.RAX;
			}
		}
		codegen = SsaX86_64Gen.new(context, mach, asm, w);
		simpleAlloc = SimpleRegAlloc.new(X86_64RegSet.SET, codegen);
	}
	def genMainEntry() {
		var main = prog.getMain().asMethod();
		var frame = computeFrameSize(getFrame(main.ssa));
		// initialize runtime if necessary
		genMainInit(frame);
		if (test) genTestInputs(main, frame);
		// call main
		var addr = X86_64AddrRef.new(null, null, 1, mach.addrOfMethod(main));
		asm.callr_addr(addr);
		// write return value to stdout if this is a test
		if (test) genTestOutput(main, frame);
		// exit with the return value of main
		if (frame.conv.retLocs.length > 0) asm_exit_r(loc_gpr(frame, frame.conv.callerRet(0)));
		else return asm_exit_code(0);
	}
	def genAllocStub() { // TODO(x86-64)
	}
	def genCodeFromSsa() {
		var frame = getFrame(context.method.ssa);
		if (mach.runtime.src != null) mach.runtime.src.curFrame = frame;
		codegen.generate(context.method, frame);
		simpleAlloc.allocate();
		computeFrameSize(frame);
		codegen.assembleInstrs();
		asm.patchLabels();
	}
	def genTestInputs(main: IrMethod, frame: MachFrame) {
		// "argc" is on the top of the stack on x86-64-linux
		asm.movq_r_m(X86_64Regs.RBX, X86_64Regs.RSP.indirect()); // load "argc"
		var params = main.ssa.params, conv = frame.conv;
		if (conv.overflow > 0) {
			// allocate space for overflow arguments
			asm.subq_r_i(X86_64Regs.RSP, conv.overflow * mach.data.addressSize);
		}

		var vals = mach.runtime.parseTestInputs(prog, prog.ERROR, params.length - 1);
		var w = MachDataWriter.!(asm.w);

		for (i < conv.paramLocs.length) {
			var loc = conv.callerParam(i), dest = Regs.toGpr(loc);
			if (i == 0) {
				// load the component "this" pointer with NULL
				asm.movq_r_i(dest, 0);
				continue;
			}
			// load the register value from the table to follow
			var tableAddr = Addr.new(mach.codeRegion, null, 0);
			var ref = X86_64AddrRef.new(null, X86_64Regs.RBX, 4, tableAddr);
			if (dest == null) {
				// destination is a stack location
				var scratchReg = Regs.toGpr(Regs.SCRATCH_GPR);
				Terminal.put3("overflow %d: loc=%d, name=%s\n", i, loc, frame.conv.regSet.identify(loc));
				var offset = mach.data.addressSize * (loc - frame.conv.regSet.callerStart);
				asm.movd_r_m(scratchReg, ref);
				asm.movq_m_r(X86_64Regs.RSP.plus(offset), scratchReg);
			} else {
				asm.movd_r_m(dest, ref);
			}


			var endAddr = Addr.new(mach.codeRegion, null, 0);
			asm.jmp_rel_addr(X86_64AddrRef.new(null, null, 1, endAddr)); // jump over the table
			tableAddr.absolute = w.posAddr() - 4; // argc = 1 adjustment
			// emit table of argument values
			for (v in vals) w.put_b32(V3.unboxIntegral(v[i - 1]));
			endAddr.absolute = w.endAddr();
		}
	}
	def genSigInstalls() {
		genSigHandlerInstall(8, mach.runtime.getFatalAddress(V3Exception.DivideByZero));
		genSigHandlerInstall(10, mach.runtime.getFatalAddress(V3Exception.NullCheck));
		genSigHandlerInstall(11, mach.runtime.getFatalAddress(V3Exception.NullCheck));
	}
	def genMainInit(frame: MachFrame) {
		// call RiRuntime.init() if it exists
		if (mach.runtime.ri_init >= 0) return genRiInit(frame);
		// if this is a test, install custom signal handlers
		if (test) return genSigInstalls();
		// TODO: remove compiler-generated initialization of args
		if (frame.conv.paramTypes.length <= 1) return; // don't bother, main doesn't use it
		// initialize arg array from OS-supplied argv and envp
		var argc = X86_64Regs.RBX, argp = X86_64Regs.RBX, argArray = X86_64Regs.RDX;
		var arrayType = V3Array.newType(mach.machType(V3.stringType));

		asm.movq_r_m(argc, X86_64Regs.RSP.indirect());
		asm.subq_r_i(argc, 1); // adjust for first arg
		asmArrayAlloc(arrayType, argArray, argc);
		asm.pushq_r(argArray); // save array on stack

		asm.leaq(argArray, argArray.plus(mach.getArrayElemOffset(arrayType)));
		asm.leaq(argp, X86_64Regs.RSP.plus(3 * mach.data.addressSize));

		// loop over individual arguments
		var loopStart = asm.pos();
		var str = X86_64Regs.RDI, strlen = X86_64Regs.RCX;

		// load the argument and test against null
		asm.movq_r_m(str, argp.indirect());
		asm.cmpq_r_i(str, 0);
		asm.jc_rel(X86_64Conds.Z, 0);
		var cmpPatch = asm.pos() - 1;

		// compute length of string by finding null byte
		asm.movq_r_i(strlen, -1);
		asm.repne().scasb(); // updates RDI and RCX, kills RAX
		asm.notq_r(strlen);
		asm.decq_r(strlen);

		// allocate a byte array of length strlen
		var argString = X86_64Regs.RDI;
		asmArrayAlloc(V3.stringType, argString, strlen);
		asm.movq_m_r(argArray.indirect(), argString); // write into arg array

		// copy data into array
		asm.leaq(X86_64Regs.RDI, argString.plus(mach.getArrayElemOffset(V3.stringType)));
		asm.movq_r_m(X86_64Regs.RSI, argp.indirect());
		asm.repne().movsb();

		// increment argp and argarray position
		asm.addq_r_i(argArray, 4);
		asm.addq_r_i(argp, 4);
		var offset = loopStart - asm.pos();
		asm.jmp_rel(offset); // loop back to start

		var offset2 = asm.pos() - cmpPatch - 1;
		asm.w.at(cmpPatch).putb(offset2); // patch the branch that skips the loop
		asm.w.atEnd();
		asm.popq_r(loc_gpr(frame, frame.conv.callerParam(1)));
	}
	def genRiInit(frame: MachFrame) {
		// generate a call to the RiRuntime.init() method
		var init_meth = mach.runtime.getRiInit();
		var frame = getFrame(init_meth.ssa), conv = frame.conv;
		// arg 0 = "this" = null
		var thisReg = Regs.toGpr(conv.calleeParam(0));
		asm.movq_r_i(thisReg, 0); // "this" = null
		// arg 1 = argc @ [esp]
		var argcReg = Regs.toGpr(conv.calleeParam(1));
		asm.movq_r_m(argcReg, X86_64Regs.RSP.indirect());
		var argvReg = Regs.toGpr(conv.calleeParam(2));
		if (test) {
			// if testing, arg 2 = argv = NULL
			asm.movq_r_i(argvReg, 0);
		} else {
			// otherwise arg 2 = argv @ [rsp + 8]
			asm.leaq(argvReg, X86_64Regs.RSP.plus(mach.data.addressSize));
		}
		// arg 3 = envp @ [esp + 8] = null
		var envpReg = Regs.toGpr(conv.calleeParam(3));
		asm.movq_r_i(envpReg, 0);
		// call RiRuntime.init(argc: int, argv: Pointer, envp: Pointer) -> Array<string>
		var ref = X86_64AddrRef.new(null, null, 1, mach.addrOfMethod(init_meth));
		asm.callr_addr(ref);
		// ret -> dest
		if (!test) {
			var retReg = Regs.toGpr(conv.calleeRet(0));
			var dest = Regs.toGpr(conv.callerParam(1));
			asm.movd_r_r(dest, retReg);
		}
	}
	def asmArrayAlloc(arrayType: Type, dest: X86_64Gpr, len: X86_64Gpr) {
		var scale = mach.getArrayElemScale(arrayType), align = (scale % mach.data.addressSize) != 0;
		var adjust = if(align, mach.data.addressSize - 1, 0);
		asm.leaq(dest, X86_64Addr.new(null, len, scale, mach.getArrayElemOffset(arrayType) + adjust));
		if (align) asm.andq_r_i(dest, -1 ^ adjust);
		asmAlloc(dest);
		asm.movq_m_i(dest.indirect(), Int.unbox(mach.objectTag(arrayType)));
		asm.movq_m_r(dest.plus(mach.getArrayLengthOffset(arrayType)), len);
	}
	def asmAlloc(reg: X86_64Gpr) {
		// exchange-add with heap current pointer
		var addr = X86_64AddrRef.new(null, null, 1, CiRuntimeModule.HEAP_CUR_LOC);
		asm.xaddq_m_r(addr, reg);
	}
	def getFrame(ssa: SsaGraph) -> MachFrame {
		return MachFrame.new(X86_64VirgilCallConv.getForGraph(ssa), mach.data.addrAlign, mach.refSize);
	}
	def computeFrameSize(frame: MachFrame) -> MachFrame {
		frame.frameSize = mach.alignTo(frame.slots() * mach.refSize + mach.code.addressSize, mach.stackAlign);
		return frame;
	}
	def patchCodeAddr(w: DataWriter, a: Addr, posAddr: int) {
		var abs = mach.absolute(a);
		if (debugMach) {
			TerminalBuffer.new()
				.puts("patch-code @0x")
				.putx(posAddr)
				.puts(" <- ")
				.putv(a, null)
				.puts(" = 0x")
				.putx(abs)
				.outln();
		}
		asm.patch(a, posAddr, abs);
	}
	def loc_gpr(frame: MachFrame, loc: int) -> X86_64Gpr {
		var r = Regs.toGpr(loc);
		if (r == null) return V3.fail(Strings.format1("expected GPR, but got %s", frame.conv.regSet.identify(loc)));
		return r;
	}
	// Methods overridden for each OS target
	def genSigHandlerInstall(signo: int, handler: Addr);
	def asm_exit_r(r: X86_64Gpr);
	def asm_exit_code(code: int);
	def genTestOutput(main: IrMethod, frame: MachFrame);
}
